<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Endoawa的博客</title>
  
  <subtitle>忘代码的程序猿</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-29T06:18:56.180Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>HUZHUOYU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/Git/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/Git/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-29T06:18:56.180Z</updated>
    
    <content type="html"><![CDATA[<p>git版本配置工具，本地仓库，云端仓库：github,码云</p><p>path：环境变量，git/cmd</p><p>东西下载慢，使用镜像下载:<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a> </p><p>卸载：<br />先清理环境变量，然后卸载    <br />环境变量：配置环境变量只是为了全局使用</p><p><a href="https://www.helloimg.com/image/ZKEYPT"><img src="https://www.helloimg.com/images/2022/09/28/ZKEYPT.png" alt="ZKEYPT.png"></a></p><p>基本命令<br /> <br />cd:改变目录<br />cd..:回退到上一个目录，直接cd进入默认目录<br />pwd:显示当前所在的目录路径<br />ls(ll):都是列出当前目录中的所有文件，只不过ll(两个ll)列出较为详细<br />touch:新建一个文件 如 touch index.js 就会在当前目录下新建一index.js文件<br />rm:删除一个文件,rm index.js 就会把 index.js 文件删除<br />mkdir:新建一个目录,就是新建一个文件夹<br />rm-r:删除一个文件夹，rm-r src 删除src目录<br />mv移动文件，mv index.html src test 是我们要移动的文件，src是目标文件夹<br />reset:重新初始化终端/清屏<br />clear:清屏<br />history：查看命令历史<br />help 查看命令历史<br />help 帮助<br />exit退出<br />#表示注释<br />rm -rf / 切勿在Linux中尝试（一删全没）删除电脑全部文件 Linux一切皆文件</p><p>查看配置:git config -1<br />查看本地配置:git config –system –list (系统)<br />git config – global（全局） –list(用户配的配置)</p><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址<br />这是非常重要的，因为每次Git提交都会使用该信息。<br />git config –global user.name “xxxx” #名称<br />git config –global user.email  “ xxxx” #邮箱<br /> <br />Git相关配置文件：<br />1.Git\etc\gitconfig：安装目录下的gitconfig –system系统级全局配置<br />2.C:用户…</p><p>Git基本理论(核心)</p><p><a href="https://www.helloimg.com/image/ZKEh7K"><img src="https://www.helloimg.com/images/2022/09/28/ZKEh7K.png" alt="ZKEh7K.png"></a><br />Workspace:工作区，就是你平时存放项目代码的地方<br />index/Stage:暂存区，用于存放拿到改动，<br />事实上它只是一个文件，保存即将提交到文件列表信息</p><p>Repository:仓库区(或本地仓库)，就是安全存放数据的位置<br />这里有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本<br />Remote:远程仓库，托管代码的服务器，可以简单的认为是你项目<br />组中的一台电脑用于远程数据交换</p><p>步骤及命令<br />从工作区域-&gt;暂存区-&gt;提交到本地仓库-&gt;提交到远程<br />add-&gt;commit-&gt;push</p><p>git status 查看是不是工作区域</p><p>仓库：<br /><a href="https://www.helloimg.com/image/ZKEuCb"><img src="https://www.helloimg.com/images/2022/09/28/ZKEuCb.md.png" alt="ZKEuCb.md.png"></a><br />1.创建一个全新的仓库<br /># 在当前目录新建一个Git代码库<br />git init:初始化项目(执行后可以看到，仅仅最终项目目录多出了一个.git目录，关于版本等的所有信息在这个目录里面)<br />2.克隆远程仓库<br />1.另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！<br /># 克隆一个项目和它的整个代码历史(版本信息)<br />$ git clone [url]<br />2.去gitee或者github上克隆一个测试</p><p>git aad . 添加所有文件到暂存区<br />git commit -m “” 把暂存区的内容添加到本地仓库 -m提交信息</p><p>GIT文件操作状态<br /><a href="https://www.helloimg.com/image/ZKEy4o"><img src="https://www.helloimg.com/images/2022/09/28/ZKEy4o.png" alt="ZKEy4o.png"></a></p><p><a href="https://www.helloimg.com/image/ZKJ5wD"><img src="https://www.helloimg.com/images/2022/09/28/ZKJ5wD.png" alt="ZKJ5wD.png"></a></p><p>忽略文件<br /><a href="https://www.helloimg.com/image/ZKJBhS"><img src="https://www.helloimg.com/images/2022/09/28/ZKJBhS.png" alt="ZKJBhS.png"></a><br /><a href="https://www.helloimg.com/image/ZKJRWQ"><img src="https://www.helloimg.com/images/2022/09/28/ZKJRWQ.png" alt="ZKJRWQ.png"></a><br />目录下简历.gitignore文件，此文件规则如下：<br />1.忽略文件中的空行或者以井号(#)开始的行将会被忽略<br />2.可以使用Linux通配符。列如：星号(<em>)代表任意多个字符，问号(?)代表一个字符，<br />方括号([abc])代表可选字符范围，大括号({string1,string2,…})代表可选字符串等。<br />3.如果名称的最前面有一个感叹号(!)，表示例外规则，将不被忽略。<br />4.如果名称的最前面是一个路径分隔符(/)，表示要忽略的文件在此目录下，而子目录的文件不忽略。<br />5.如果名称的最后面的一个路径分隔符(/)，表示要忽略的是此目录下该名称的子目录，而非文件夹(默认文件或目录都忽略)。<br />#为注释<br /></em>.txt      #忽略所有 .txt结尾的文件<br />!lib.txt  #但lib.txt除外<br />/temp  #仅忽略项目根目录下的TODO文件，不包括其他目录temp<br />build/  #忽略build/目录下的所有文件<br />doc/*.txt  #会忽略  doc/notes.txt 但不包括  doc/server/arch.txt</p><hr><p>使用码云<br /><a href="https://www.helloimg.com/image/ZKJZgt"><img src="https://www.helloimg.com/images/2022/09/28/ZKJZgt.png" alt="ZKJZgt.png"></a><br /><a href="https://www.helloimg.com/image/ZKJFPu"><img src="https://www.helloimg.com/images/2022/09/28/ZKJFPu.png" alt="ZKJFPu.png"></a><br /><a href="https://www.helloimg.com/image/ZKJPHv"><img src="https://www.helloimg.com/images/2022/09/28/ZKJPHv.png" alt="ZKJPHv.png"></a><br />没有跟邮箱等之类的信息它会默认给你选择（没有.ssh文件需要先使用命令在当前目录下，然后一直回车就ok了）<br /><a href="https://www.helloimg.com/image/ZKJ3CY"><img src="https://www.helloimg.com/images/2022/09/28/ZKJ3CY.png" alt="ZKJ3CY.png"></a><br />生成完成之后进入当前目录下的.ssh文件下选择id_rsa文件进入复制激活码，进入码云粘贴创建即可。（id_rsa.put（公共的））</p><hr><p>IDEA集成Git<br /> 修改文件，使用idea操作git<br />第一步创建文件夹，当前目录使用git init设置成本地仓库<br />第二步gitee上面创建一个空的仓库，克隆到我们创建的本地仓库，然后进入idea创建一个空项目，把这个项目的地址改成我们本地仓库的地址后面再加个/文件名，然后把我们克隆的内容复制到这个我们创建的这个/文件名里面然后进入idea操作即可。</p><ul><li>添加到暂存区</li><li>commit提交</li><li>push远程仓库</li></ul><p>设置本地仓库<a href="https://www.helloimg.com/image/ZKJX49"><img src="https://www.helloimg.com/images/2022/09/28/ZKJX49.png" alt="ZKJX49.png"></a><br />第一步<br /><a href="https://www.helloimg.com/image/ZKJe0X"><img src="https://www.helloimg.com/images/2022/09/28/ZKJe0X.md.png" alt="ZKJe0X.md.png"></a><br />第二步<br /><a href="https://www.helloimg.com/image/ZKJqhg"><img src="https://www.helloimg.com/images/2022/09/28/ZKJqhg.png" alt="ZKJqhg.png"></a><br />第三步（远程仓库里克隆的内容 git clone【url】）<br /><a href="https://www.helloimg.com/image/ZKJJ9P"><img src="https://www.helloimg.com/images/2022/09/28/ZKJJ9P.png" alt="ZKJJ9P.png"></a><br />第四步（把远程仓库里面的内容复制粘贴到我们创建的这个项目当中）<br /><a href="https://www.helloimg.com/image/ZKJmg6"><img src="https://www.helloimg.com/images/2022/09/28/ZKJmg6.png" alt="ZKJmg6.png"></a><br />单个人的操作</p><hr><p>说明：GIT分支<br />分支在GIT中相对是比较难的，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！<br /><a href="https://www.helloimg.com/image/ZKJtan"><img src="https://www.helloimg.com/images/2022/09/28/ZKJtan.png" alt="ZKJtan.png"></a><a href="https://www.helloimg.com/image/ZKJ4bR"><img src="https://www.helloimg.com/images/2022/09/28/ZKJ4bR.png" alt="ZKJ4bR.png"></a><br />git分支中常用的命令<br /><a href="https://www.helloimg.com/image/ZKJADz"><img src="https://www.helloimg.com/images/2022/09/28/ZKJADz.png" alt="ZKJADz.png"></a></p>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/Nginx/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/Nginx/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-29T05:59:58.117Z</updated>
    
    <content type="html"><![CDATA[<p><a name="Pn67a"></a></p><h2 id="公司产品出现瓶颈？"><a href="#公司产品出现瓶颈？" class="headerlink" title="公司产品出现瓶颈？"></a>公司产品出现瓶颈？</h2><p>我们公司项目刚刚上线的时候，并发量小，用户使用的少，所以在低并发的情况下，一个jar包启动应用就够了，然后内部tomcat返回内容给用户。<br /><a href="https://www.helloimg.com/image/ZKSz5T"><img src="https://www.helloimg.com/images/2022/09/29/ZKSz5T.png" alt="ZKSz5T.png"></a><br />但是慢慢的，使用我们平台的用户越来越多了，并发量慢慢增大了，这时候一台服务器满足不了我们的需求了。<br /><a href="https://www.helloimg.com/image/ZKS7s1"><img src="https://www.helloimg.com/images/2022/09/29/ZKS7s1.png" alt="ZKS7s1.png"></a><br />于是我们横向扩展，又增加了服务器。这个时候几个项目启动在不同的服务器上，用户要访问，就需要增加一个代理服务器了，通过代理服务器来帮我们转发和处理请求。<br /><a href="https://www.helloimg.com/image/ZKSDdK"><img src="https://www.helloimg.com/images/2022/09/29/ZKSDdK.png" alt="ZKSDdK.png"></a><br />我们希望这个代理服务器可以帮助我们接收用户的请求，然后将用户的请求按照规则帮我们转发到不同的服务器节点之上。这个过程用户是无感知的，用户并不知道是哪个服务器返回的结果，我们还希望他可以按照服务器的性能提供不同的权重选择。保证最佳体验！所以我们使用了Nginx。<br><a name="rwUgj"></a></p><h2 id="什么是Nginx？"><a href="#什么是Nginx？" class="headerlink" title="什么是Nginx？"></a>什么是Nginx？</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。2011年6月1日，nginx 1.0.4发布。<br />其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。<br />Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。<br />Nginx代码完全用C语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。<br><a name="tjQjp"></a></p><h2 id="Nginx作用？"><a href="#Nginx作用？" class="headerlink" title="Nginx作用？"></a>Nginx作用？</h2><p>Http代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理。<br />正向代理<br /><a href="https://www.helloimg.com/image/ZKSIYb"><img src="https://www.helloimg.com/images/2022/09/29/ZKSIYb.png" alt="ZKSIYb.png"></a><br />反向代理<br /><a href="https://www.helloimg.com/image/ZKS8eo"><img src="https://www.helloimg.com/images/2022/09/29/ZKS8eo.png" alt="ZKS8eo.png"></a><br />Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的。<br />轮询<br /><a href="https://www.helloimg.com/image/ZKSK2D"><img src="https://www.helloimg.com/images/2022/09/29/ZKSK2D.png" alt="ZKSK2D.png"></a><br />加权轮询<br/><a href="https://www.helloimg.com/image/ZKSkFC"><img src="https://www.helloimg.com/images/2022/09/29/ZKSkFC.png" alt="ZKSkFC.png"></a><br />iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。<br/><a href="https://www.helloimg.com/image/ZKSriQ"><img src="https://www.helloimg.com/images/2022/09/29/ZKSriQ.png" alt="ZKSriQ.png"></a><br />动静分离，在我们的软件开发中，有些请求是需要后台处理的，有些请求是不需要经过后台处理的（如：css、html、jpg、js等等文件），这些不需要经过后台处理的文件称为静态文件。让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作。提高资源响应的速度。<br /><a href="https://www.helloimg.com/image/ZKShsv"><img src="https://www.helloimg.com/images/2022/09/29/ZKShsv.png" alt="ZKShsv.png"></a><br />目前，通过使用Nginx大大提高了我们网站的响应速度，优化了用户体验，让网站的健壮性更上一层楼！<br><a name="wTGaR"></a></p><h1 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h1><p><a name="CRCME"></a></p><h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><p><strong>1、下载nginx</strong><br /><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a> 下载稳定版本。<br />以nginx/Windows-1.16.1为例，直接下载 nginx-1.16.1.zip。<br />下载后解压，解压后如下：<br/><a href="https://www.helloimg.com/image/ZKSjvE"><img src="https://www.helloimg.com/images/2022/09/29/ZKSjvE.png" alt="ZKSjvE.png"></a><br/><strong>2、启动nginx</strong><br />有很多种方法启动nginx<br />(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过<br />(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 nginx.exe ，回车即可<br /><strong>3、检查nginx是否启动成功</strong><br />直接在浏览器地址栏输入网址 <a href="http://localhost/">http://localhost:80</a> 回车，出现以下页面说明启动成功！<br /><a href="https://www.helloimg.com/image/ZKSuYY"><img src="https://www.helloimg.com/images/2022/09/29/ZKSuYY.png" alt="ZKSuYY.png"></a><br /><strong>4、配置监听</strong><br />nginx的配置文件是conf目录下的nginx.conf，默认配置的nginx监听的端口为80，如果80端口被占用可以修改为未被占用的端口即可。<br /><a href="https://www.helloimg.com/image/ZKi5e9"><img src="https://www.helloimg.com/images/2022/09/29/ZKi5e9.png" alt="ZKi5e9.png"></a><br />当我们修改了nginx的配置文件nginx.conf 时，不需要关闭nginx后重新启动nginx，只需要执行命令 nginx -s reload 即可让改动生效<br /><strong>5、关闭nginx</strong><br />如果使用cmd命令窗口启动nginx， 关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx<br />(1)输入nginx命令 nginx -s stop(快速停止nginx) 或 nginx -s quit(完整有序的停止nginx)<br />(2)使用taskkill taskkill /f /t /im nginx.exe</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">taskkill是用来终止进程的，</span><br><span class="line">/f是强制终止 .</span><br><span class="line">/t终止指定的进程和任何由此启动的子进程。</span><br><span class="line">/im示指定的进程名称 .</span><br></pre></td></tr></table></figure><p><a name="r5ALm"></a></p><h2 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h2><p><strong>1、安装gcc</strong><br />安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p><strong>2、PCRE pcre-devel 安装</strong><br />PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p><strong>3、zlib 安装</strong><br />zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><p><strong>4、OpenSSL 安装</strong><br/>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br/>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。<br/>yum install -y openssl openssl-devel<br /><strong>5、下载安装包</strong><br/>手动下载.tar.gz安装包，地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a><br/><a href="https://www.helloimg.com/image/ZKiBTX"><img src="https://www.helloimg.com/images/2022/09/29/ZKiBTX.png" alt="ZKiBTX.png"></a><br />下载完毕上传到服务器上 /root<br /><strong>6、解压</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-<span class="number">1.18</span><span class="number">.0</span>.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd nginx-<span class="number">1.18</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p><a href="https://www.helloimg.com/image/ZKiIC6"><img src="https://www.helloimg.com/images/2022/09/29/ZKiIC6.png" alt="ZKiIC6.png"></a><br /><strong>7、配置</strong><br />使用默认配置，在nginx根目录下执行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>查找安装路径： whereis nginx<br /><a href="https://www.helloimg.com/image/ZKi80R"><img src="https://www.helloimg.com/images/2022/09/29/ZKi80R.png" alt="ZKi80R.png"></a><br><a name="S4pDt"></a></p><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx 启动 </span><br><span class="line">停止./nginx -s stop  </span><br><span class="line">安全退出./nginx -s quit  </span><br><span class="line">重新加载配置文件ps./nginx -s reload  </span><br><span class="line">查看nginx进程aux|grep nginx  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动成功访问 服务器ip:80<br/><a href="https://www.helloimg.com/image/ZKigxA"><img src="https://www.helloimg.com/images/2022/09/29/ZKigxA.png" alt="ZKigxA.png"></a><br />注意：如何连接不上，检查阿里云安全组是否开放端口，或者服务器防火墙是否开放端口！<br />相关命令：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 开启service firewalld start</span><br><span class="line"># 重启service firewalld restart</span><br><span class="line"># 关闭service firewalld stop</span><br><span class="line"># 查看防火墙规则firewall-cmd --list-all</span><br><span class="line"># 查询端口是否开放firewall-cmd --query-port=<span class="number">8080</span>/tcp</span><br><span class="line"># 开放<span class="number">80</span>端口firewall-cmd --permanent --add-port=<span class="number">80</span>/tcp</span><br><span class="line"># 移除端口firewall-cmd --permanent --remove-port=<span class="number">8080</span>/tcp</span><br><span class="line">#重启防火墙(修改配置后要重启防火墙)firewall-cmd --reload</span><br><span class="line"># 参数解释<span class="number">1</span>、firwall-cmd：是Linux提供的操作firewall的一个工具；</span><br><span class="line"><span class="number">2</span>、--permanent：表示设置为持久；</span><br><span class="line"><span class="number">3</span>、--add-port：标识添加的端口；</span><br></pre></td></tr></table></figure><p><a name="akeq5"></a></p><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">upstream lb&#123;    </span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> weight=<span class="number">1</span>;    </span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8081</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//lb;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nginx常用命令</p><p>nginx的访问页面(welcome to nginx)具体所在位置<br />vi /usr/share/nginx/html/index.html<br />访问IP<br />curl 192.168.100.111<br />关闭nginx进程<br />nginx -s stop<br />启动nginx进程<br />/usr/sbin/nginx          yum安装的nginx也可以使用         servic nginx start<br />检查配置文件是否有误<br />nginx –t<br />重新加载配置文件<br />nginx –s reload<br />查看日志<br />tail -f filename 显示文件默认10行，刷新显示<br />例：tail -f /var/log/lvs-agent.log          tail -f /etc/nginx/nginx.conf<br />查看文件后几行<br />tail -n 行数 文件名 例： tail -n 100 /var/log/aa.log<br />删除网卡ip<br />ip addr del 192.168.11.5/32 dev lo (lo eth1 eth2)<br />lvs清空所有集群服务<br />ipvsadm –C<br />获取eth0网卡上的所挂的ip值<br />ip a|grep eth0|grep inet|awk ‘{print $2}’|cut -d “/” -f1<br />验证该ip或者网址是否通 可用返回200<br />curl -I -m 10 -o /dev/null -s -w %{http_code} 10.110.26.10:8080<br />后台启动jar包<br />nohup java -jar /usr/sbin/项目名.jar &gt;&gt;/var/log/项目名.log 2&gt;&amp;1 &amp;<br />查看上一个命令是否执行成功 返回0执行成功 其他不成<br />echo $?<br />查看nginx进程是否启动。此命令用在代码判断nginx进程是否启动，如果只用ps aux | grep nginx 即使没有启动也会用内容返回，影响判断<br />ps aux | grep nginx | greo –v grep<br />如果是安装包安装的nginx,查看nginx进程，找到路径，使用命令。<br />ps aux | grep nginx</p><p>/usr/local/nginx/sbin/nginx -t<br />/usr/local/nginx/sbin/nginx -s reload<br />/usr/local/nginx/sbin/nginx -s stop</p><hr><p>80端口被占用<br />在cmd控制台输入“regedit”回车，然后注册表编辑器会弹出，依次展开如下路径HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\HTTP，然后点击HTTP，会看到有个Start文件。<br /> <br />一、问题现象描述<br />1.在部署java项目或者其它项目，启动时出现80端口占用情况<br />2.使用netstat查看端口，发现80端口被PID为4的进程占用：<img src="%5Bhttps://img-blog.csdnimg.cn/20210218150224272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjc4MzU0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">](<a href="https://img-blog.csdnimg.cn/20210218150224272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjc4MzU0,size_16,color_FFFFFF,t_70">https://img-blog.csdnimg.cn/20210218150224272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjc4MzU0,size_16,color_FFFFFF,t_70</a>))<br />3.打开任务管理器，表头右键，勾选PID，会发现PID为4的进程是个SYSTEM进程，描述为NT Kernel &amp; System，尝试用鼠标右键菜单结束此进程，发现结束任务按钮为灰不可用，或者结束进程不了<br />二、解决方法/步骤<br />1.以管理员身份运行cmd<br />2.运行net stop http<br />3.按y 确定<br />4.运行 Sc config http start= disabled<br />5.再次查 netstat –ano 发现pid 4的进程占用端口从80端口变为了445端口<br />6.再次启动我们的工程。<br /><a href="https://blog.csdn.net/qq_33278354/article/details/113847068"><br /></a></p><p><a href="https://blog.csdn.net/weixin_44248000/article/details/103432778"><br /></a><br /><a href="https://blog.csdn.net/liucy007/article/details/86716870"><br /></a></p>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/RabbitMQ/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/RabbitMQ/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-29T06:19:16.313Z</updated>
    
    <content type="html"><![CDATA[<p><a name="pZSVK"></a></p><h1 id="RabbitMQ超详细安装教程（Linux）"><a href="#RabbitMQ超详细安装教程（Linux）" class="headerlink" title="RabbitMQ超详细安装教程（Linux）"></a><a href="https://www.cnblogs.com/helong-123/p/16065964.html">RabbitMQ超详细安装教程（Linux）</a></h1><p>镜像下载、域名解析、时间同步请点击<a href="https://developer.aliyun.com/mirror/?utm_content=g_1000303593">阿里云开源镜像站</a><br><a name="NKSbF"></a></p><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>官网：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a><br />RabbitMQ是一个开源的遵循AMQP协议实现的基于Erlang语言编写，支持多种客户端（语言），用于在分布式系统中存储消息，转发消息，具有高可用高可扩性，易用性等特征。<br /><a href="https://www.helloimg.com/image/ZK4EQz"><img src="https://www.helloimg.com/images/2022/09/29/ZK4EQz.png" alt="ZK4EQz.png"></a><br><a name="cN2na"></a></p><h2 id="2、下载安装启动RabbitMQ"><a href="#2、下载安装启动RabbitMQ" class="headerlink" title="2、下载安装启动RabbitMQ"></a>2、下载安装启动RabbitMQ</h2><p><strong>环境准备</strong>：阿里云centos7.6 服务器<br /># 查看系统版本 [root@zsr ~]# lsb_release -a LSB Version:    :core-4.1-amd64:core-4.1-noarch Distributor ID:    CentOS Description:    CentOS Linux release 7.6.1810 (Core)  Release:    7.6.1810 Codename:    Core<br><a name="Xv3XE"></a></p><h3 id="2-1、下载RabbitMQ"><a href="#2-1、下载RabbitMQ" class="headerlink" title="2.1、下载RabbitMQ"></a>2.1、下载RabbitMQ</h3><p><strong>下载地址</strong>：<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a><br /><a href="https://www.helloimg.com/image/ZK4JyA"><img src="https://www.helloimg.com/images/2022/09/29/ZK4JyA.png" alt="ZK4JyA.png"></a><br />选择对应的系统版本点击下载，下载后会得到.rpm文件<br /><a href="https://www.helloimg.com/image/ZK4sm5"><img src="https://www.helloimg.com/images/2022/09/29/ZK4sm5.png" alt="ZK4sm5.png"></a><br><a name="sGcMf"></a></p><h2 id="2-2、下载Erlang"><a href="#2-2、下载Erlang" class="headerlink" title="2.2、下载Erlang"></a>2.2、下载Erlang</h2><p>RabbitMQ是采用 Erlang语言开发的，所以系统环境必须提供 Erlang环境，需要是安装 Erlang<br />Erlang和RabbitMQ版本对照：<a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a><br /><a href="https://www.helloimg.com/image/ZK4tc0"><img src="https://www.helloimg.com/images/2022/09/29/ZK4tc0.png" alt="ZK4tc0.png"></a><br />这里安装最新版本3.8.14的RabbitMQ，对应的Erlang版本推荐23.x，我们下载erlang-23.2.7-2.el7.x86_64.rpm<br />下载地址：<a href="https://packagecloud.io/rabbitmq/erlang/packages/el/7/erlang-23.2.7-2.el7.x86_64.rpm">https://packagecloud.io/rabbitmq/erlang/packages/el/7/erlang-23.2.7-2.el7.x86_64.rpm</a><br /><a href="https://www.helloimg.com/image/ZK44Vm"><img src="https://www.helloimg.com/images/2022/09/29/ZK44Vm.png" alt="ZK44Vm.png"></a><br />其中的el7表示Red Hat 7.x，即CentOS 7.x<br />点击右上角下载即可得到.rpm文件<br /><a href="https://www.helloimg.com/image/ZK4L3h"><img src="https://www.helloimg.com/images/2022/09/29/ZK4L3h.png" alt="ZK4L3h.png"></a><br><a name="O99Mk"></a></p><h3 id="2-3、安装Erlang"><a href="#2-3、安装Erlang" class="headerlink" title="2.3、安装Erlang"></a>2.3、安装Erlang</h3><p>首先将下载好的文件上传到服务器，创建一个文件夹用来存放文件<br />[root@zsr ~]# mkdir -p /usr/rabbitmq <br />再利用xftp工具将上述下载的两个.rpm文件上传到服务器的刚创建的文件夹中<br /><a href="https://www.helloimg.com/image/ZK4SMc"><img src="https://www.helloimg.com/images/2022/09/29/ZK4SMc.png" alt="ZK4SMc.png"></a><br />然后切换到/usr/rabbitmq目录，解压安装erlang<br /># 解压 rpm -Uvh erlang-23.2.7-2.el7.x86_64.rpm # 安装 yum install -y erlang <br /><a href="https://www.helloimg.com/image/ZK4i8q"><img src="https://www.helloimg.com/images/2022/09/29/ZK4i8q.png" alt="ZK4i8q.png"></a><br />安装完成后输入如下指令查看版本号<br />erl -v <br /><a href="https://www.helloimg.com/image/ZK4HZr"><img src="https://www.helloimg.com/images/2022/09/29/ZK4HZr.png" alt="ZK4HZr.png"></a><br><a name="Oe3Y4"></a></p><h3 id="2-4、安装RabbitMQ"><a href="#2-4、安装RabbitMQ" class="headerlink" title="2.4、安装RabbitMQ"></a>2.4、安装RabbitMQ</h3><p>在RabiitMQ安装过程中需要依赖socat插件，首先安装该插件<br />yum install -y socat <br />然后解压安装RabbitMQ的安装包<br /># 解压 rpm -Uvh rabbitmq-server-3.8.14-1.el7.noarch.rpm # 安装 yum install -y rabbitmq-server<br><a name="EMH7y"></a></p><h3 id="2-5、启动RabbitMQ服务"><a href="#2-5、启动RabbitMQ服务" class="headerlink" title="2.5、启动RabbitMQ服务"></a>2.5、启动RabbitMQ服务</h3><h1 id="启动rabbitmq-systemctl-start-rabbitmq-server-查看rabbitmq状态-systemctl-status-rabbitmq-server-显示active则表示服务安装并启动成功其他命令：-设置rabbitmq服务开机自启动-systemctl-enable-rabbitmq-server-关闭rabbitmq服务-systemctl-stop-rabbitmq-server-重启rabbitmq服务-systemctl-restart-rabbitmq-server"><a href="#启动rabbitmq-systemctl-start-rabbitmq-server-查看rabbitmq状态-systemctl-status-rabbitmq-server-显示active则表示服务安装并启动成功其他命令：-设置rabbitmq服务开机自启动-systemctl-enable-rabbitmq-server-关闭rabbitmq服务-systemctl-stop-rabbitmq-server-重启rabbitmq服务-systemctl-restart-rabbitmq-server" class="headerlink" title="启动rabbitmq systemctl start rabbitmq-server # 查看rabbitmq状态 systemctl status rabbitmq-server 显示active则表示服务安装并启动成功其他命令：# 设置rabbitmq服务开机自启动 systemctl enable rabbitmq-server # 关闭rabbitmq服务 systemctl stop rabbitmq-server # 重启rabbitmq服务 systemctl restart rabbitmq-server"></a>启动rabbitmq systemctl start rabbitmq-server # 查看rabbitmq状态 systemctl status rabbitmq-server <br />显示active则表示服务安装并启动成功<br /><a href="https://www.helloimg.com/image/ZK4bST"><img src="https://www.helloimg.com/images/2022/09/29/ZK4bST.png" alt="ZK4bST.png"></a><br />其他命令：<br /># 设置rabbitmq服务开机自启动 systemctl enable rabbitmq-server # 关闭rabbitmq服务 systemctl stop rabbitmq-server # 重启rabbitmq服务 systemctl restart rabbitmq-server</h1><p><a name="CzvBT"></a></p><h2 id="3、RabbitMQWeb管理界面及授权操作"><a href="#3、RabbitMQWeb管理界面及授权操作" class="headerlink" title="3、RabbitMQWeb管理界面及授权操作"></a>3、RabbitMQWeb管理界面及授权操作</h2><p><a name="p0Tp0"></a></p><h3 id="3-1、安装启动RabbitMQWeb管理界面"><a href="#3-1、安装启动RabbitMQWeb管理界面" class="headerlink" title="3.1、安装启动RabbitMQWeb管理界面"></a>3.1、安装启动RabbitMQWeb管理界面</h3><p>默认情况下，rabbitmq没有安装web端的客户端软件，需要安装才可以生效<br /># 打开RabbitMQWeb管理界面插件 rabbitmq-plugins enable rabbitmq_management <br /><a href="https://www.helloimg.com/image/ZK4lp1"><img src="https://www.helloimg.com/images/2022/09/29/ZK4lp1.png" alt="ZK4lp1.png"></a><br />然后我们打开浏览器，访问服务器公网ip:15672（注意打开阿里云安全组以及防火墙的15672端口），就可以看到管理界面<br/><a href="https://www.helloimg.com/image/ZK4MyK"><img src="https://www.helloimg.com/images/2022/09/29/ZK4MyK.png" alt="ZK4MyK.png"></a><br />rabbitmq有一个默认的账号密码guest，但该情况仅限于本机localhost进行访问，所以需要添加一个远程登录的用户<br><a name="k5ri8"></a></p><h3 id="3-2、添加远程用户"><a href="#3-2、添加远程用户" class="headerlink" title="3.2、添加远程用户"></a>3.2、添加远程用户</h3><h1 id="添加用户-rabbitmqctl-add-user-用户名-密码-设置用户角色-分配操作权限-rabbitmqctl-set-user-tags-用户名-角色-为用户添加资源权限-授予访问虚拟机根节点的所有权限-rabbitmqctl-set-permissions-p-用户名-“-“-“-“-“-”-角色有四种："><a href="#添加用户-rabbitmqctl-add-user-用户名-密码-设置用户角色-分配操作权限-rabbitmqctl-set-user-tags-用户名-角色-为用户添加资源权限-授予访问虚拟机根节点的所有权限-rabbitmqctl-set-permissions-p-用户名-“-“-“-“-“-”-角色有四种：" class="headerlink" title="添加用户 rabbitmqctl add_user 用户名 密码 # 设置用户角色,分配操作权限 rabbitmqctl set_user_tags 用户名 角色 # 为用户添加资源权限(授予访问虚拟机根节点的所有权限) rabbitmqctl set_permissions -p / 用户名 “.“ “.“ “.*” 角色有四种："></a>添加用户 rabbitmqctl add_user 用户名 密码 # 设置用户角色,分配操作权限 rabbitmqctl set_user_tags 用户名 角色 # 为用户添加资源权限(授予访问虚拟机根节点的所有权限) rabbitmqctl set_permissions -p / 用户名 “.<em>“ “.</em>“ “.*” <br /><strong>角色有四种：</strong></h1><ul><li>administrator：可以登录控制台、查看所有信息、并对rabbitmq进行管理</li><li>monToring：监控者；登录控制台，查看所有信息</li><li>policymaker：策略制定者；登录控制台指定策略</li><li>managment：普通管理员；登录控制</li></ul><p>这里创建用户zsr，密码123456，设置adminstator角色，赋予所有权限<br /><a href="https://www.helloimg.com/image/ZK4Tmb"><img src="https://www.helloimg.com/images/2022/09/29/ZK4Tmb.png" alt="ZK4Tmb.png"></a><br />创建完成后，访问服务器公网ip:15672进行登录，然后便可进入到后台<br /><a href="https://www.helloimg.com/image/ZK4Wdo"><img src="https://www.helloimg.com/images/2022/09/29/ZK4Wdo.png" alt="ZK4Wdo.png"></a><br />其他指令：<br /># 修改密码 rabbitmqctl change_ password 用户名 新密码 # 删除用户 rabbitmqctl delete_user 用户名 # 查看用户清单 rabbitmqctl list_users<br><a name="orKir"></a></p><h2 id="4、Docker安装RabbitMQ"><a href="#4、Docker安装RabbitMQ" class="headerlink" title="4、Docker安装RabbitMQ"></a>4、Docker安装RabbitMQ</h2><p><a name="q2kGg"></a></p><h3 id="4-1、安装Docker"><a href="#4-1、安装Docker" class="headerlink" title="4.1、安装Docker"></a>4.1、安装Docker</h3><h1 id="1-yum包更新到最新-yum-update-2-安装需要的软件包-yum-utils提供yum-config-manager的功能-，并且device-mapper存储驱动程序需要device-mapper-persistent-data和lvm2-yum-install-y-yum-utils-device-mapper-persistent-data-lvm2-3-设置yum源为阿里云-yum-config-manager-–add-repo-http-mirrors-aliyun-com-docker-ce-linux-centos-docker-ce-repo-4-安装docker-yum-install-docker-ce-y-5-安装后查看docker版本-docker-v-6-阿里云镜像加速-sudo-mkdir-p-etc-docker-sudo-tee-etc-docker-daemon-json-lt-lt-‘EOF’-“registry-mirrors”-“https-73z5h6yb-mirror-aliyuncs-com-quot-EOF-sudo-systemctl-daemon-reload-sudo-systemctl-restart-docker-docker常用命令：-启动docker-systemctl-start-docker-停止docker-systemctl-stop-docker-重启docker-systemctl-restart-docker-查看docker状态-systemctl-status-docker-开机启动-systemctl-enable-docker-systemctl-unenable-docker-查看docker概要信息-docker-info-查看docker帮助文档-docker-–help"><a href="#1-yum包更新到最新-yum-update-2-安装需要的软件包-yum-utils提供yum-config-manager的功能-，并且device-mapper存储驱动程序需要device-mapper-persistent-data和lvm2-yum-install-y-yum-utils-device-mapper-persistent-data-lvm2-3-设置yum源为阿里云-yum-config-manager-–add-repo-http-mirrors-aliyun-com-docker-ce-linux-centos-docker-ce-repo-4-安装docker-yum-install-docker-ce-y-5-安装后查看docker版本-docker-v-6-阿里云镜像加速-sudo-mkdir-p-etc-docker-sudo-tee-etc-docker-daemon-json-lt-lt-‘EOF’-“registry-mirrors”-“https-73z5h6yb-mirror-aliyuncs-com-quot-EOF-sudo-systemctl-daemon-reload-sudo-systemctl-restart-docker-docker常用命令：-启动docker-systemctl-start-docker-停止docker-systemctl-stop-docker-重启docker-systemctl-restart-docker-查看docker状态-systemctl-status-docker-开机启动-systemctl-enable-docker-systemctl-unenable-docker-查看docker概要信息-docker-info-查看docker帮助文档-docker-–help" class="headerlink" title="1.yum包更新到最新 yum update # 2.安装需要的软件包(yum-utils提供yum-config-manager的功能,，并且device mapper存储驱动程序需要device-mapper-persistent-data和lvm2) yum install -y yum-utils device-mapper-persistent-data lvm2 # 3.设置yum源为阿里云 yum-config-manager –add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 4.安装docker yum install docker-ce -y # 5.安装后查看docker版本 docker -v # 6.阿里云镜像加速 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’ {   “registry-mirrors”: [“https://73z5h6yb.mirror.aliyuncs.com&quot;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker docker常用命令：# 启动docker systemctl start docker # 停止docker systemctl stop docker # 重启docker systemctl restart docker # 查看docker状态 systemctl status docker # 开机启动 systemctl enable docker systemctl unenable docker  # 查看docker概要信息 docker info  # 查看docker帮助文档 docker –help"></a>1.yum包更新到最新 yum update # 2.安装需要的软件包(yum-utils提供yum-config-manager的功能,，并且device mapper存储驱动程序需要device-mapper-persistent-data和lvm2) yum install -y yum-utils device-mapper-persistent-data lvm2 # 3.设置yum源为阿里云 yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a> # 4.安装docker yum install docker-ce -y # 5.安装后查看docker版本 docker -v # 6.阿里云镜像加速 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’ {   “registry-mirrors”: [“<a href="https://73z5h6yb.mirror.aliyuncs.com&quot;]">https://73z5h6yb.mirror.aliyuncs.com&quot;]</a> } EOF sudo systemctl daemon-reload sudo systemctl restart docker <br />docker常用命令：<br /># 启动docker systemctl start docker # 停止docker systemctl stop docker # 重启docker systemctl restart docker # 查看docker状态 systemctl status docker # 开机启动 systemctl enable docker systemctl unenable docker  # 查看docker概要信息 docker info  # 查看docker帮助文档 docker –help</h1><p><a name="YcJxJ"></a></p><h3 id="4-2、安装启动RabbitMQ"><a href="#4-2、安装启动RabbitMQ" class="headerlink" title="4.2、安装启动RabbitMQ"></a>4.2、安装启动RabbitMQ</h3><h1 id="安装启动rabbitmq容器-docker-run-d-–name-myRabbitMQ-e-RABBITMQ-DEFAULT-USER-zsr-e-RABBITMQ-DEFAULT-PASS-123456-p-15672-15672-p-5672-5672-rabbitmq-3-8-14-management-然后打开浏览器访问服务器公网ip-15672，输入我们创建的账号密码登录，登录成功代表docker安装并启动成功"><a href="#安装启动rabbitmq容器-docker-run-d-–name-myRabbitMQ-e-RABBITMQ-DEFAULT-USER-zsr-e-RABBITMQ-DEFAULT-PASS-123456-p-15672-15672-p-5672-5672-rabbitmq-3-8-14-management-然后打开浏览器访问服务器公网ip-15672，输入我们创建的账号密码登录，登录成功代表docker安装并启动成功" class="headerlink" title="安装启动rabbitmq容器 docker run -d –name myRabbitMQ -e RABBITMQ_DEFAULT_USER=zsr -e RABBITMQ_DEFAULT_PASS=123456 -p 15672:15672 -p 5672:5672 rabbitmq:3.8.14-management 然后打开浏览器访问服务器公网ip:15672，输入我们创建的账号密码登录，登录成功代表docker安装并启动成功"></a>安装启动rabbitmq容器 docker run -d –name myRabbitMQ -e RABBITMQ_DEFAULT_USER=zsr -e RABBITMQ_DEFAULT_PASS=123456 -p 15672:15672 -p 5672:5672 rabbitmq:3.8.14-management <br />然后打开浏览器访问服务器公网ip:15672，输入我们创建的账号密码登录，登录成功代表docker安装并启动成功<br /><a href="https://www.helloimg.com/image/ZK49VD"><img src="https://www.helloimg.com/images/2022/09/29/ZK49VD.png" alt="ZK49VD.png"></a></h1>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>前端工具依赖安装</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-26T09:09:35.261Z</updated>
    
    <content type="html"><![CDATA[<p>node安装<a href="https://www.bilibili.com/video/BV1LA411u7dE?spm_id_from=333.337.search-card.all.click&vd_source=c8a5b9ee0b819d05960ea969f8833f93">安装教程视频</a><br />vscode安装<a href="https://www.bilibili.com/video/BV1W5411h75Q?spm_id_from=333.337.search-card.all.click&vd_source=c8a5b9ee0b819d05960ea969f8833f93">安装教程视频</a></p><p>node.js（使用脚手架配置）<br /><a href="https://www.helloimg.com/image/Z88apQ"><img src="https://www.helloimg.com/images/2022/09/26/Z88apQ.png" alt="Z88apQ.png"></a><br /><a href="https://www.helloimg.com/image/Z8835t"><img src="https://www.helloimg.com/images/2022/09/26/Z8835t.png" alt="Z8835t.png"></a><br />在cmd命令行执行</p>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker镜像</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8IDEA%E5%88%9B%E5%BB%BADocker%E9%95%9C%E5%83%8F%EF%BC%8CDocker%E5%AE%B9%E5%99%A8%EF%BC%8C%E5%B9%B6%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8IDEA%E5%88%9B%E5%BB%BADocker%E9%95%9C%E5%83%8F%EF%BC%8CDocker%E5%AE%B9%E5%99%A8%EF%BC%8C%E5%B9%B6%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-29T04:40:56.824Z</updated>
    
    <content type="html"><![CDATA[<p><a name="tBXb6"></a></p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>这里用到的知识，在之前的文章中就有提及，所以说不明白的地方可以看这里：</p><ul><li><a href="https://blog.csdn.net/ZZY1078689276/article/details/85048145">Docker</a></li><li><a href="https://blog.csdn.net/ZZY1078689276/article/details/85220244">在Windows中安装Docker</a></li><li><a href="https://blog.csdn.net/ZZY1078689276/article/details/85220273">在IDEA中安装和使用Docker插件</a></li><li><a href="https://blog.csdn.net/ZZY1078689276/article/details/85058065">使用Dockerfile创建Docker镜像</a></li></ul><p>由于这一篇文章中涉及到项目的发布，而这里所发布的项目采用的是之前文章中提及的注册中心Eureka，因而不清楚的可以看这里：</p><ul><li><a href="https://blog.csdn.net/ZZY1078689276/article/details/84963159">Spring Cloud与微服务之注册中心Eureka</a><br><a name="Vay7D"></a><h1 id="Docker相关文件及目录"><a href="#Docker相关文件及目录" class="headerlink" title="Docker相关文件及目录"></a><a href="https://so.csdn.net/so/search?q=Docker&spm=1001.2101.3001.7020">Docker</a>相关文件及目录</h1><a name="DTyS9"></a><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><a href="https://www.helloimg.com/image/ZK4cXS"><img src="https://www.helloimg.com/images/2022/09/29/ZK4cXS.png" alt="ZK4cXS.png"></a><br><a name="qSgXJ"></a><h2 id="与Docker相关的部分源码"><a href="#与Docker相关的部分源码" class="headerlink" title="与Docker相关的部分源码"></a>与Docker相关的部分<a href="https://so.csdn.net/so/search?q=%E6%BA%90%E7%A0%81&spm=1001.2101.3001.7020">源码</a></h2>由于这里项目的源码在之前的文章<a href="https://blog.csdn.net/ZZY1078689276/article/details/84963159">Spring Cloud与微服务之注册中心Eureka</a>中都有，所以说这里就单单上传一下与Docker相关的源码。<br />而这里，即便是与Docker相关的源码，其都在<a href="https://blog.csdn.net/ZZY1078689276/article/details/85058065">使用Dockerfile创建Docker镜像</a>中有提及，而这里之所以再次罗列出来，仅仅是其中只有少数的不同之处，这里就索性都写出来了。<br />app-entrypoint.sh源码：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#上面是固定的开头</span><br><span class="line"># 命令行运行项目jar包指令</span><br><span class="line">java -jar /spring-cloud/springcloud-eureka.jar</span><br></pre></td></tr></table></figure></li></ul><p> Dockerfile源码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#镜像出处</span><br><span class="line">FROM java:8</span><br><span class="line">#维护者信息</span><br><span class="line">MAINTAINER zzy</span><br><span class="line">#镜像操作指令</span><br><span class="line">#在容器的根目录中创建spring-cloud文件夹</span><br><span class="line">RUN mkdir -p /spring-cloud</span><br><span class="line">#将本地项目jar包拷贝到Docker容器中的位置</span><br><span class="line">COPY ./springcloud-eureka.jar /spring-cloud/springcloud-eureka.jar</span><br><span class="line">#将本地的可执行文件拷贝到Docker容器中的根目录</span><br><span class="line">COPY ./app-entrypoint.sh /</span><br><span class="line">#给app-entrypoint.sh赋予可执行权限</span><br><span class="line">RUN chmod +x /app-entrypoint.sh</span><br><span class="line">#对外暴漏的端口号</span><br><span class="line">EXPOSE 6868</span><br><span class="line">#开机启动</span><br><span class="line">ENTRYPOINT [&quot;/app-entrypoint.sh&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="TPQ7C"></a></p><h1 id="编辑IDEA项目配置文件"><a href="#编辑IDEA项目配置文件" class="headerlink" title="编辑IDEA项目配置文件"></a>编辑IDEA项目配置文件</h1><p><a name="GZtBC"></a></p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>这里的镜像采用的是java:8，所以说需要我们优先拉取该镜像。<br /><a href="https://www.helloimg.com/image/ZK4d2C"><img src="https://www.helloimg.com/images/2022/09/29/ZK4d2C.png" alt="ZK4d2C.png"></a><br><a name="vMEJ2"></a></p><h2 id="配置Docker镜像与容器"><a href="#配置Docker镜像与容器" class="headerlink" title="配置Docker镜像与容器"></a>配置Docker镜像与容器</h2><p>在IDEA顶部的菜单栏中找到图示的Edit Configurations选项，点击打开配置面板：<br /><a href="https://www.helloimg.com/image/ZK4v8Q"><img src="https://www.helloimg.com/images/2022/09/29/ZK4v8Q.png" alt="ZK4v8Q.png"></a><br />点击上面的+并依次点击Docker-&gt;Dockerfile<br /><a href="https://www.helloimg.com/image/ZKSWdA"><img src="https://www.helloimg.com/images/2022/09/29/ZKSWdA.png" alt="ZKSWdA.png"></a><br />然后在打开的配置面板中进行如下配置：<br /><a href="https://www.helloimg.com/image/ZKS9Y5"><img src="https://www.helloimg.com/images/2022/09/29/ZKS9Y5.png" alt="ZKS9Y5.png"></a><br />Name:命名为eureka，它指的是该项配置文件将被命名为eureka。<br />Dockerfile指的是Dockerfile文件的文件路径，这里通过手选就可以了，我这里的路径如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springcloud-eureka\docker-dir\Dockerfile</span><br></pre></td></tr></table></figure><p>Image tag：指的是将项目jar包打成镜像后，该镜像的名称以及tag标签，我的如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springcloud-eureka:1.0 </span><br></pre></td></tr></table></figure><p>Container name：指的是项目容器在加载打成的Docker镜像后，其容器的名称，由于容器就是运行着的项目，也就是说是我们的eureka服务，因此这里将容器的名称命名为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eureka-server    </span><br></pre></td></tr></table></figure><p>Command：这里指的是在容器运行时加载的其它指令，这里的指令为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-t       （--tty=false 分配tty设备，该可以支持终端登录）    </span><br></pre></td></tr></table></figure><p>Bind ports：这里指的是绑定的容器与本机的端口号，在端口号指定方面，我们应该尽量与项目中的配置文件的端口号保持一致，也即是6868。<br />端口号的绑定也很简单，就是如下：<br /><a href="https://www.helloimg.com/image/ZKScX0"><img src="https://www.helloimg.com/images/2022/09/29/ZKScX0.png" alt="ZKScX0.png"></a><br />在绑定端口号后，我们的项目就已经成功的配置好了Docker，表面上我们是在配置Docker，实际上我们是在拼接Docker的相关命令行语句，该语句在点击Command preview后即可查看，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t springcloud-eureka:1.0 .</span><br><span class="line">&amp;&amp; docker run</span><br><span class="line">-p 6868:6868</span><br><span class="line">--name eureka-server</span><br><span class="line">springcloud-eureka:1.0 -t</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的语句和我们之前在<a href="https://blog.csdn.net/ZZY1078689276/article/details/85058065">使用Dockerfile创建Docker镜像</a>的文章中所提到的语句其实是一样的。<br />当我们点击Apply、OK按钮后，Docker配置完成。<br><a name="LJS6h"></a></p><h1 id="启动并访问项目"><a href="#启动并访问项目" class="headerlink" title="启动并访问项目"></a>启动并访问项目</h1><p><a name="XTgX7"></a></p><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>启动Docker时，直接点击图示的运行图标。<br /><a href="https://www.helloimg.com/image/ZKSd2m"><img src="https://www.helloimg.com/images/2022/09/29/ZKSd2m.png" alt="ZKSd2m.png"></a>)<br />springcloud-eureka项目将被自动打成Docker镜像，然后自动创建并启动Docker容器加载该创建的Docker镜像，其结果如下图所示：<br /><a href="https://www.helloimg.com/image/ZKSv8h"><img src="https://www.helloimg.com/images/2022/09/29/ZKSv8h.png" alt="ZKSv8h.png"></a><br />在上面的截图中，我们可以清楚的看到新创建的docker镜像springcloud-eureka:1.0与容器eureka-server，同时我们还看到，在Log控制台中打印出了当前的项目启动日志。<br><a name="mlZAZ"></a></p><h2 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h2><p>由于容器中的项目已经被启动起来了，因而我们可以在浏览器中直接访问项目。<br />此时我们访问的项目路径不是下面的地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:6868/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因而此时的Docker分配的ip地址并不是本机的ip地址，而是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.99.100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自然，在浏览器中访问的IP地址应该如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.99.100:6868/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问之后的结果如下：<br /><a href="https://www.helloimg.com/image/ZKS0oc"><img src="https://www.helloimg.com/images/2022/09/29/ZKS0oc.png" alt="ZKS0oc.png"></a><br />其登录后的主界面如下;<br /><a href="https://www.helloimg.com/image/ZKSNiq"><img src="https://www.helloimg.com/images/2022/09/29/ZKSNiq.png" alt="ZKSNiq.png"></a><br />至此，我们在IDEA中配置的Docker已经运行成功。<br><a name="z56ai"></a></p><h1 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h1><p><a name="mu0zO"></a></p><h2 id="文件类型错误"><a href="#文件类型错误" class="headerlink" title="文件类型错误"></a>文件类型错误</h2><p>有时我们启动时会出现下面异常：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">standard_init_linux.go:190: exec user process caused &quot;no such file or directory&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时是由于我们创建的app-entrypoint.sh可执行文件是在Windows中所创建的，其在创建时就被添加了一些Windows格式，因而该问题的解决办法是直接在Linux中创建，然后手动导出。<br><a name="yXDjU"></a></p><h2 id="不能直接将jar包位置指定为target目录"><a href="#不能直接将jar包位置指定为target目录" class="headerlink" title="不能直接将jar包位置指定为target目录"></a>不能直接将jar包位置指定为target目录</h2><p>如果是细心的话，我们会发现，在Dockerfile中存在下面的语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY ./springcloud-eureka.jar /spring-cloud/springcloud-eureka.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而如果我们将其改成下面的语句时，似乎是更简化了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY ../target/springcloud-eureka.jar /spring-cloud/springcloud-eureka.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们不用再将项目的jar包拷贝到docker-dir目录中，直接在target目录中指定就可以了，这样看似是可以的，但是实际上却不行，因而COPY的行为不能发生在target目录中。<br />所以此时会出现如下异常：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Step 4/8 : COPY ../target/springcloud-eureka.jar /spring-cloud/springcloud-eureka.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Error: ResponseItem.ErrorDetail[code=<null>,message=COPY failed: Forbidden path outside the build context: …/target/springcloud-eureka.jar ()]<br />Failed to deploy ‘eureka-server Dockerfile: springcloud-eureka/docker-dir/Dockerfile’: COPY failed: Forbidden path outside the build context: …/target/springcloud-eureka.jar ()</p>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Posman安装</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/Posman/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/Posman/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-29T06:19:22.343Z</updated>
    
    <content type="html"><![CDATA[<p><a name="S5k8c"></a></p><h1 id="一、安装postman"><a href="#一、安装postman" class="headerlink" title="一、安装postman"></a>一、安装postman</h1><p><a name="prQpa"></a></p><h2 id="1，安装包安装"><a href="#1，安装包安装" class="headerlink" title="1，安装包安装"></a>1，安装包安装</h2><p>官网下载地址:<a href="https://www.getpostman.com/">https://www.getpostman.com</a> <br />选择好对应的版本下载,下载完后直接安装 <br /><a href="https://www.helloimg.com/image/ZK4BRu"><img src="https://www.helloimg.com/images/2022/09/29/ZK4BRu.png" alt="ZK4BRu.png"></a><br><a name="nTzVO"></a></p><h2 id="2，插件包安装"><a href="#2，插件包安装" class="headerlink" title="2，插件包安装"></a>2，插件包安装</h2><p>可以在谷歌的应用商店里面找到,或者在网上下载。 <br />准备了一个配置完整的postman插件包 <br /><a href="http://download.csdn.net/detail/qazwsxpcm/9823420">http://download.csdn.net/detail/qazwsxpcm/9823420</a> <br />下载完成后 打开谷歌浏览器 <br />打开扩展程序，勾选开发者模式,点击加载文件，选择解压后的插件包 <br /><a href="https://www.helloimg.com/image/ZK4CLv"><img src="https://www.helloimg.com/images/2022/09/29/ZK4CLv.png" alt="ZK4CLv.png"></a><br><a href="https://www.helloimg.com/image/ZK4GQE"><img src="https://www.helloimg.com/images/2022/09/29/ZK4GQE.png" alt="ZK4GQE.png"></a><br><a name="xgoI8"></a></p><h1 id="二、postman使用"><a href="#二、postman使用" class="headerlink" title="二、postman使用"></a>二、postman使用</h1><p><a name="tHn61"></a></p><h2 id="1，启动postman"><a href="#1，启动postman" class="headerlink" title="1，启动postman"></a>1，启动postman</h2><p>打开谷歌浏览器，点击应用，点击postman，或者在开发工具里面也可以启动postman。<br /><a href="https://www.helloimg.com/image/ZK4RuY"><img src="https://www.helloimg.com/images/2022/09/29/ZK4RuY.png" alt="ZK4RuY.png"></a><br /><a href="https://www.helloimg.com/image/ZK4oJ9"><img src="https://www.helloimg.com/images/2022/09/29/ZK4oJ9.png" alt="ZK4oJ9.png"></a><br />第一次启动postman 会要求输入用户名和密码，如果没有的话，关闭，再次启动就可以直接进入了 <br /><a href="https://www.helloimg.com/image/ZK4FcX"><img src="https://www.helloimg.com/images/2022/09/29/ZK4FcX.png" alt="ZK4FcX.png"></a><br /><a href="https://www.helloimg.com/image/ZK4Prg"><img src="https://www.helloimg.com/images/2022/09/29/ZK4Prg.png" alt="ZK4Prg.png"></a><br><a name="bGoSi"></a></p><h2 id="2，postman使用"><a href="#2，postman使用" class="headerlink" title="2，postman使用"></a>2，postman使用</h2><p>将url复制到输入框中,选好格式,然后点击send,就可以调用了。Body是返回的参数，可以判断是否调用成功. <br />注:如果是https的的请求,可以在设置setting里面去掉ssl验证,或者现在谷歌浏览器先刷一遍,点击继续前往便可以调用了。 <br /><a href="https://www.helloimg.com/image/ZK413M"><img src="https://www.helloimg.com/images/2022/09/29/ZK413M.png" alt="ZK413M.png"></a><br />保存请求 <br />方便下次调用 <br /><a href="https://www.helloimg.com/image/ZK43MP"><img src="https://www.helloimg.com/images/2022/09/29/ZK43MP.png" alt="ZK43MP.png"></a><br />导出、加载请求 <br />换环境之后只需加载以前的请求便拥有和以前一样的配置 <br /><a href="https://www.helloimg.com/image/ZK4X66"><img src="https://www.helloimg.com/images/2022/09/29/ZK4X66.png" alt="ZK4X66.png"></a><br /><a href="https://www.helloimg.com/image/ZK4qZn"><img src="https://www.helloimg.com/images/2022/09/29/ZK4qZn.png" alt="ZK4qZn.png"></a><br />代码生成 <br />点击Generate Code <br />选择开发语言便可以生成代码 <br /><a href="https://www.helloimg.com/image/ZK4xSR"><img src="https://www.helloimg.com/images/2022/09/29/ZK4xSR.png" alt="ZK4xSR.png"></a></p>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MongDB精通</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/MongoDB%20%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6%20-%20%E9%9B%86%E7%BE%A4%E5%92%8C%E5%AE%89%E5%85%A8%20(1)/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/MongoDB%20%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6%20-%20%E9%9B%86%E7%BE%A4%E5%92%8C%E5%AE%89%E5%85%A8%20(1)/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-29T06:19:01.122Z</updated>
    
    <content type="html"><![CDATA[<p><a name="I9EXB"></a></p><h1 id="MongoDB-数据库高级进阶-集群和安全"><a href="#MongoDB-数据库高级进阶-集群和安全" class="headerlink" title="MongoDB 数据库高级进阶 - 集群和安全"></a>MongoDB 数据库高级进阶 - 集群和安全</h1><blockquote><p>配套资料: <a href="https://pan.baidu.com/s/18au42FIhSNrXY9p7MbmNbg">https://pan.baidu.com/s/18au42FIhSNrXY9p7MbmNbg</a> 提取码: 29ad<br>感谢 B 站用户 <a href="https://space.bilibili.com/55263887">冷鸟丨会飞</a>分享</p></blockquote><p>课程目标</p><ul><li>MongoDB 的副本集：操作、主要概念、故障转移、选举规则</li><li>MongoDB 的分片集群：概念、优点、操作、分片策略、故障转移</li><li>MongoDB 的安全认证<br><a name="D5RaD"></a><h2 id="1-MongoDB-副本集-Replica-Sets"><a href="#1-MongoDB-副本集-Replica-Sets" class="headerlink" title="1. MongoDB 副本集 - Replica Sets"></a>1. MongoDB 副本集 - Replica Sets</h2><a name="t94VR"></a><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3>MongoDB 中的副本集（Replica Set）是一组维护相同数据集的 mongod 服务。 副本集可提供<strong>冗余和高可用性</strong>，是所有生产部署的基础。<br />也可以说，副本集类似于有自动故障恢复功能的主从集群。通俗的讲就是用_多台机器进行同一数据的异步同步_，从而使多台机器拥有同一数据的多个副本，并且当主库当掉时在不需要用户干预的情况下自动切换其他备份服务器做主库。而且还可以<strong>利用副本服务器做只读服务器，实现读写分离，提高负载</strong>。<br><a name="ZWZZS"></a><h4 id="冗余和数据可用性"><a href="#冗余和数据可用性" class="headerlink" title="冗余和数据可用性"></a>冗余和数据可用性</h4>复制提供冗余并提高数据可用性。 通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别的容错功能，以防止丢失单个数据库服务器。<br />在某些情况下，复制可以提供增加的读取性能，因为客户端可以将读取操作发送到不同的服务上， 在不同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性。 还可以为专用目的维护其他副本，例如灾难恢复，报告或备份。<br><a name="ah50c"></a><h4 id="MongoDB-中的复制"><a href="#MongoDB-中的复制" class="headerlink" title="MongoDB 中的复制"></a>MongoDB 中的复制</h4>副本集是一组维护相同数据集的 mongod 实例。 副本集包含多个数据承载节点和可选的一个仲裁节点。 在承载数据的节点中，一个且仅一个成员被视为主节点，而其他节点被视为次要（从）节点。<br />主节点接收所有写操作。 副本集只能有一个主要能够确认具有 {w：”most”} 写入关注的写入; 虽然在某些情况下，另一个 mongod 实例可能暂时认为自己也是主要的。主要记录其操作日志中的数据集的所有 更改，即 oplog。</li></ul><p>辅助(副本)节点复制主节点的oplog并将操作应用于其数据集，以使辅助节点的数据集反映主节点的数据 集。 如果主要人员不在，则符合条件的中学将举行选举以选出新的主要人员。<br><a name="EBRH1"></a></p><h4 id="主从复制和副本集区别"><a href="#主从复制和副本集区别" class="headerlink" title="主从复制和副本集区别"></a>主从复制和副本集区别</h4><p>主从集群和副本集最大的区别就是<strong>副本集没有固定的”主节点”</strong>；整个集群会选出一个”主节点”，当其挂掉后，又在剩下的从节点中选中其他节点为主节点，副本集总有一个活跃点 (主、primary) 和一个或多个备份节点 (从、secondary)<br><a name="wlKrD"></a></p><h3 id="1-2-副本集的三个角色"><a href="#1-2-副本集的三个角色" class="headerlink" title="1.2 副本集的三个角色"></a>1.2 副本集的三个角色</h3><p>副本集有两种类型三种角色<br />两种类型：</p><ul><li>主节点（Primary）类型：数据操作的主要连接点，<strong>可读写</strong></li><li>次要（辅助、从）节点（Secondary）类型：数据冗余备份节点，可以<strong>读或选举</strong></li></ul><p>三种角色：</p><ul><li>主要成员（Primary）：主要接收所有写操作。就是主节点</li><li>副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，<strong>不可写操作</strong>，但可以读操作（但需要配置）。是默认的一种从节点类型</li><li>仲裁者（Arbiter）：<strong>不保留任何数据的副本，只具有投票选举作用</strong>。当然也可以将仲裁服务器维护为副本集的一部分，即副本成员同时也可以是仲裁者。也是一种从节点类型。</li></ul><p><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/replica-set-primary-with-secondary-and-arbiter.bakedsvg.png#crop=0&crop=0&crop=1&crop=1&from=url&id=FpOFa&margin=%5Bobject%20Object%5D&originHeight=280&originWidth=740&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />关于仲裁者的额外说明：<br />您可以将额外的 mongod 实例添加到副本集作为仲裁者。 仲裁者不维护数据集。 仲裁者的目的是通过响应其他副本集成员的心跳和选举请求来维护副本集中的仲裁。 因为它们不存储数据集，所以仲裁器可以是提供副本集仲裁功能的好方法，其资源成本比具有数据集的全功能副本集成员更便宜。<br />如果您的副本集具有偶数个成员，请添加仲裁者以获得主要选举中的<strong>大多数</strong>投票。 仲裁者不需要专用 硬件。<br />仲裁者将永远是仲裁者，而主要人员可能会退出并成为次要人员，而次要人员可能成为选举期间的主要人员。<br />如果你的副本+主节点的个数是偶数，建议加一个仲裁者，形成奇数，容易满足大多数的投票。<br />如果你的副本+主节点的个数是奇数，可以不加仲裁者。<br />说人话就是 <a href="https://zhenye-na.github.io/blog/2020/02/07/[https://www.wikiwand.com/zh/Paxos%E7%AE%97%E6%B3%95](https://www.wikiwand.com/zh/Paxos%E7%AE%97%E6%B3%95)">Paxos 协议算法</a>, 建议阅读<br><a name="hQLfa"></a></p><h3 id="1-3-动手实现一个副本集"><a href="#1-3-动手实现一个副本集" class="headerlink" title="1.3 动手实现一个副本集"></a>1.3 动手实现一个副本集</h3><p><a name="gc4Vr"></a></p><h4 id="1-3-1-创建节点"><a href="#1-3-1-创建节点" class="headerlink" title="1.3.1 创建节点"></a>1.3.1 创建节点</h4><p>使用一个主节点, 一个副节点, 一个仲裁节点</p><ol><li>用端口号区分不同的节点</li><li>副本集名称都是 myrs</li></ol><p><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/replica-set-primary-with-secondary-and-arbiter.bakedsvg.png#crop=0&crop=0&crop=1&crop=1&from=url&id=uj7UI&margin=%5Bobject%20Object%5D&originHeight=280&originWidth=740&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200507220642083.png#crop=0&crop=0&crop=1&crop=1&from=url&id=V5G4I&margin=%5Bobject%20Object%5D&originHeight=541&originWidth=835&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>主节点 (PRIMARY), 副节点 (SECONDARY), 以及仲裁节点 (ARBITER) 的创建过程详见配套文档</p></blockquote><p><a name="G7oo3"></a></p><h4 id="1-3-2-初始化配置副本集和主节点"><a href="#1-3-2-初始化配置副本集和主节点" class="headerlink" title="1.3.2 初始化配置副本集和主节点"></a>1.3.2 初始化配置副本集和主节点</h4><p>使用客户端命令连接任意一个节点，但这里尽量要连接主节点 (27017节点)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /usr/local/mongodb/bin/mongo --host=180.76.159.126 --port=27017</span><br></pre></td></tr></table></figure><p>连接上之后，很多命令无法使用, 比如 show dbs 等，必须初始化副本集才行<br />初始化新的副本集</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># example, `configuration` is optional</span><br><span class="line"># rs.initiate(configuration)</span><br><span class="line"></span><br><span class="line">$ rs.initiate()</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info2&quot; : &quot;no configuration specified. Using a default configuration for the set&quot;,</span><br><span class="line">  &quot;me&quot; : &quot;&lt;ip_address&gt;:27017&quot;,</span><br><span class="line">  &quot;ok&quot; : 1,</span><br><span class="line">  &quot;operationTime&quot; : Timestamp(1565760476, 1),</span><br><span class="line">  &quot;$clusterTime&quot; : &#123;</span><br><span class="line">    &quot;clusterTime&quot; : Timestamp(1565760476, 1),</span><br><span class="line">    &quot;signature&quot; : &#123;</span><br><span class="line">    &quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;),</span><br><span class="line">    &quot;keyId&quot; : NumberLong(0)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myrs:SECONDARY&gt; &lt;hit enter&gt;</span><br><span class="line">myrs:PRIMARY&gt;</span><br></pre></td></tr></table></figure><ol><li>ok 的值为 1, 说明创建成功</li><li>命令行提示符发生变化，变成了一个从节点角色，此时默认不能读写。稍等片刻，回车，变成主节 点。<br><a name="WIs6r"></a><h4 id="1-3-3-查看配置"><a href="#1-3-3-查看配置" class="headerlink" title="1.3.3 查看配置"></a>1.3.3 查看配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># configuration - optional</span><br><span class="line">$ rs.conf(configuration)</span><br><span class="line"></span><br><span class="line">myrs:PRIMARY&gt; rs.conf()</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_id&quot; : &quot;myrs&quot;,</span><br><span class="line">  &quot;version&quot; : 1,</span><br><span class="line">  &quot;protocolVersion&quot; : NumberLong(1),</span><br><span class="line">  &quot;writeConcernMajorityJournalDefault&quot; : true,</span><br><span class="line">  &quot;members&quot; : [&#123;</span><br><span class="line">    &quot;_id&quot; : 0,</span><br><span class="line">    &quot;host&quot; : &quot;180.76.159.126:27017&quot;,</span><br><span class="line">    &quot;arbiterOnly&quot; : false,</span><br><span class="line">    &quot;buildIndexes&quot; : true,</span><br><span class="line">    &quot;hidden&quot; : false,</span><br><span class="line">    &quot;priority&quot; : 1,</span><br><span class="line">    &quot;tags&quot; : &#123;&#125;,</span><br><span class="line">    &quot;slaveDelay&quot; : NumberLong(0),</span><br><span class="line">    &quot;votes&quot; : 1</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;settings&quot; : &#123;</span><br><span class="line">    &quot;chainingAllowed&quot; : true,</span><br><span class="line">    &quot;heartbeatIntervalMillis&quot; : 2000,</span><br><span class="line">    &quot;heartbeatTimeoutSecs&quot; : 10,</span><br><span class="line">    &quot;electionTimeoutMillis&quot; : 10000,</span><br><span class="line">    &quot;catchUpTimeoutMillis&quot; : -1,</span><br><span class="line">    &quot;catchUpTakeoverDelayMillis&quot; : 30000,</span><br><span class="line">    &quot;getLastErrorModes&quot; : &#123;&#125;,</span><br><span class="line">    &quot;getLastErrorDefaults&quot; : &#123;</span><br><span class="line">      &quot;w&quot; : 1,</span><br><span class="line">      &quot;wtimeout&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;replicaSetId&quot; : ObjectId(&quot;5d539bdcd6a308e600d126bb&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>&quot;_id&quot; : &quot;myrs&quot; </code>：副本集的配置数据存储的主键值，默认就是<strong>副本集</strong>的名字</li><li>“<code>members&quot;</code> ：副本集成员数组，此时只有一个： <code>&quot;host&quot; : &quot;180.76.159.126:27017&quot; </code>，该成员不是仲裁节点： <code>&quot;arbiterOnly&quot; : false </code>，优先级（权重值）：<code> &quot;priority&quot; : 1</code></li><li><code>&quot;settings&quot; </code>：副本集的参数配置。<br><a name="kwt6Z"></a><h4 id="1-3-4-查看副本集状态"><a href="#1-3-4-查看副本集状态" class="headerlink" title="1.3.4 查看副本集状态"></a>1.3.4 查看副本集状态</h4>返回包含状态信息的文档。此输出使用从副本集的其他成员发送的心跳包中获得的数据反映副本集的当 前状态<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rs.status()</span><br></pre></td></tr></table></figure><a name="U9WwE"></a><h4 id="1-3-5-添加副本节点以及仲裁节点"><a href="#1-3-5-添加副本节点以及仲裁节点" class="headerlink" title="1.3.5 添加副本节点以及仲裁节点"></a>1.3.5 添加副本节点以及仲裁节点</h4>在主节点添加从节点，将其他成员加入到副本集<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rs.add(host, arbiterOnly)</span><br></pre></td></tr></table></figure>添加一个仲裁节点到副本集<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rs.addArb(host)</span><br></pre></td></tr></table></figure><a name="gSm3n"></a><h3 id="1-4-副本集的数据读写操作"><a href="#1-4-副本集的数据读写操作" class="headerlink" title="1.4 副本集的数据读写操作"></a>1.4 副本集的数据读写操作</h3>副本节点 (SECONDARY) 默认不能 read , 更不可能 write 数据, 需要<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rs.slaveOk()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myrs:SECONDARY&gt; show dbs; </span><br><span class="line"></span><br><span class="line">&quot;errmsg&quot; : &quot;not master and slaveOk=false&quot;,</span><br><span class="line"></span><br><span class="line"># 非主节点同时 slaveOk=false 无法读写</span><br></pre></td></tr></table></figure>数据会自动同步, 但是会有延迟</li></ul><hr><p>仲裁者节点, 不存放任何数据 -&gt; <code>rs.slaveOk()</code> 也看不到数据<br><a name="WIhJ0"></a></p><h3 id="1-5-主节点的选举原则"><a href="#1-5-主节点的选举原则" class="headerlink" title="1.5 主节点的选举原则"></a>1.5 主节点的选举原则</h3><p>MongoDB在副本集中，会自动进行主节点的选举，主节点选举的触发条件</p><ol><li>主节点故障</li><li>主节点网络不可达 (默认心跳信息为 10 秒)</li><li>人工干预 <code>rs.stepDown(600)</code></li></ol><p>一旦触发选举，就要根据一定规则来选主节点<br />选举规则是根据票数来决定谁获胜</p><ul><li>票数最高，且获得了“大多数”成员的投票支持的节点获胜。<ul><li>“大多数”的定义为：假设复制集内投票成员数量为N，则大多数为 N/2 + 1。例如：3个投票成员， 则大多数的值是2。当复制集内存活成员数量不足大多数时，整个复制集将无法选举出Primary， 复制集将无法提供写服务，处于只读状态。</li></ul></li><li>若票数相同，且都获得了“大多数”成员的投票支持的，数据新的节点获胜。<ul><li>数据的新旧是通过操作日志 oplog 来对比的。</li></ul></li></ul><p>在获得票数的时候，优先级（priority）参数影响重大。<br />可以通过设置优先级（priority）来设置额外票数。优先级即权重，取值为0-1000，相当于可额外增加 0-1000的票数，优先级的值越大，就越可能获得多数成员的投票（votes）数。指定较高的值可使成员 更有资格成为主要成员，更低的值可使成员更不符合条件。<br />默认情况下，优先级的值是 1<br><a name="SbsDb"></a></p><h3 id="1-6-故障测试"><a href="#1-6-故障测试" class="headerlink" title="1.6 故障测试"></a>1.6 故障测试</h3><p><a name="Kpc7P"></a></p><h4 id="1-6-1-副本节点故障测试"><a href="#1-6-1-副本节点故障测试" class="headerlink" title="1.6.1 副本节点故障测试"></a>1.6.1 副本节点故障测试</h4><p>关闭 <code>27018 </code>副本节点</p><ul><li><p>主节点和仲裁节点对 <code>27018 </code>的心跳失败。因为主节点还在，因此，没有触发投票选举。</p></li><li><p>如果此时，在主节点写入数据。再启动从节点，会发现，<strong>主节点写入的数据</strong>，<strong>会自动同步给从节点</strong>。<br><a name="Npuwi"></a></p><h4 id="1-6-2-主节点故障测试"><a href="#1-6-2-主节点故障测试" class="headerlink" title="1.6.2 主节点故障测试"></a>1.6.2 主节点故障测试</h4><p>关闭27017节点</p></li><li><p>从节点和仲裁节点对27017的心跳失败，当失败超过10秒，此时因为没有主节点了，会自动发起投票。</p></li><li><p>而副本节点只有27018，因此，候选人只有一个就是27018，开始投票。</p></li><li><p>27019向27018投了一票，27018本身自带一票，因此共两票，超过了“大多数”</p></li><li><p>27019是仲裁节点，没有选举权，27018不向其投票，其票数是0.</p></li></ul><p>最终结果，27018成为主节点。具备读写功能。 在27018写入数据查看。<br><a name="tr9XJ"></a></p><h4 id="1-6-3-仲裁节点和主节点故障"><a href="#1-6-3-仲裁节点和主节点故障" class="headerlink" title="1.6.3 仲裁节点和主节点故障"></a>1.6.3 仲裁节点和主节点故障</h4><p>先关掉仲裁节点27019， 关掉现在的主节点27018 登录27017后</p><ul><li>27017仍然是从节点，副本集中没有主节点了，导致此时，副本集是只读状态， 无法写入。</li><li>为啥不选举了？<ul><li>因为27017的票数，没有获得大多数，即没有大于等于2，它只有默认的一票（优先级 是1）</li><li>如果要触发选举，随便加入一个成员即可。<ul><li>如果只加入27019仲裁节点成员，则主节点一定是27017，因为没得选了，仲裁节点不参与选举， 但参与投票</li><li>如果只加入27018节点，会发起选举。因为27017和27018都是两票，则按照谁数据新，谁当主节点。<br><a name="ZWYdJ"></a><h4 id="1-6-4-仲裁节点和从节点故障"><a href="#1-6-4-仲裁节点和从节点故障" class="headerlink" title="1.6.4 仲裁节点和从节点故障"></a>1.6.4 仲裁节点和从节点故障</h4>先关掉仲裁节点 <code>27019</code>，关掉现在的副本节点 <code>27018</code><br />10秒后，<code>27017 </code>主节点自动降级为副本节点。（服务降级）<br />副本集不可写数据了，已经故障了。<br><a name="yB7GA"></a><h2 id="2-分片集群-Sharded-Cluster"><a href="#2-分片集群-Sharded-Cluster" class="headerlink" title="2. 分片集群 - Sharded Cluster"></a>2. 分片集群 - Sharded Cluster</h2><a name="iRXTj"></a><h3 id="2-1-分片概念"><a href="#2-1-分片概念" class="headerlink" title="2.1 分片概念"></a>2.1 分片概念</h3>分片 (<strong>sharding</strong>) 是一种跨多台机器分布数据的方法， MongoDB 使用分片来支持具有非常大的数据集和高吞吐量操作的部署。<br />换句话说：分片 (sharding) 是指将数据拆分，将其分散存在不同的机器上的过程。有时也用分区 (<strong>partitioning</strong>) 来表示这个概念。将数据分散到不同的机器上，不需要功能强大的大型计算机就可以储存更多的数据，处理更多的负载。</li></ul></li></ul></li></ul><p>具有大型数据集或高吞吐量应用程序的数据库系统可以会挑战单个服务器的容量。例如，高查询率会耗尽服务器的 CPU 容量。工作集大小大于系统的 RAM 会强调磁盘驱动器的 I/O 容量。<br />有两种解决系统增长的方法：<strong>垂直扩展</strong>和<strong>水平扩展</strong>。</p><ul><li><strong>垂直扩展</strong>意味着<strong>增加单个服务器的容量</strong>，例如使用更强大的CPU，添加更多RAM或增加存储空间量。可 用技术的局限性可能会限制单个机器对于给定工作负载而言足够强大。此外基于云的提供商基于可用的硬件配置具有硬性上限。结果，垂直缩放有实际的最大值。</li><li><strong>水平扩展</strong>意味着<strong>划分系统数据集并加载多个服务器</strong>，添加其他服务器以根据需要增加容量。虽然单个机器的总体速度或容量可能不高，但每台机器处理整个工作负载的子集，可能提供比单个高速大容量服务器更高的效率。扩展部署容量只需要根据需要添加额外的服务器，这可能比单个机器的高端硬件的总体 成本更低。权衡是基础架构和部署维护的复杂性增加。</li></ul><p>MongoDB 支持通过<strong>分片进行水平扩展</strong>。<br><a name="BGC3Z"></a></p><h3 id="2-2-分片集群包含的组件"><a href="#2-2-分片集群包含的组件" class="headerlink" title="2.2 分片集群包含的组件"></a>2.2 分片集群包含的组件</h3><p>MongoDB 分片群集包含以下组件：</p><ul><li>分片（存储）：每个分片包含分片数据的子集。 每个分片都可以部署为副本集。</li><li>mongos （路由）：mongos充当查询路由器，在客户端应用程序和分片集群之间提供接口。</li><li>conﬁg servers （”调度” 的配置）：配置服务器存储群集的元数据和配置设置。 从MongoDB 3.4 开始，必须将配置服务器部署为副本集（CSRS）。</li></ul><p><a name="FjynR"></a></p><h3 id="2-3-分片集群架构目标"><a href="#2-3-分片集群架构目标" class="headerlink" title="2.3 分片集群架构目标"></a>2.3 分片集群架构目标</h3><p>两个分片节点副本集（3+3）+ 一个配置节点副本集（3）+ 两个路由节点（2），共 <code>11 </code>个服务节点<br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200513214148083.png#crop=0&crop=0&crop=1&crop=1&from=url&id=HiMjT&margin=%5Bobject%20Object%5D&originHeight=503&originWidth=891&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />副本集的创建详见文档以及视频<br />添加分片</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sh.addShard(&quot;IP:Port&quot;, &quot;IP:Port&quot;, &quot;IP:Port&quot;)</span><br></pre></td></tr></table></figure><p>查看分片状态情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sh.status()</span><br></pre></td></tr></table></figure><p>如果添加分片失败，需要先手动移除分片，检查添加分片的信息的正确性后，再次添加分片。 移除分片:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ use admin</span><br><span class="line">$ db.runCommand( &#123; removeShard: &quot;myshardrs02&quot; &#125; )</span><br></pre></td></tr></table></figure><ul><li>如果只剩下最后一个 shard，是无法删除的</li><li>移除时会自动转移分片数据，需要一个时间过程</li><li>完成后，再次执行删除分片命令才能真正删除</li></ul><p>开启分片功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sh.enableSharding(&quot;articledb&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sh.enableSharding(&quot;库名&quot;)</span><br><span class="line"></span><br><span class="line">$ sh.shardCollection(&quot;库名.集合名&quot;,&#123;&quot;key&quot;:1&#125;)</span><br></pre></td></tr></table></figure><p>集合分片，使用 <code>sh.shardCollection()</code> 方法指定集合和分片键</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sh.shardCollection(namespace, key, unique)</span><br></pre></td></tr></table></figure><p>对集合进行分片时, 你需要选择一个 <strong>片键</strong> (Shard Key) shard key 是每条记录都必须包含的, 且建立了<strong>索引</strong>的单个字段或复合字段, MongoDB按照片键将数据划分到不同的数据块中,并将数据块均衡地分布到所有分片中. 为了按照片键划分数据块, MongoDB使用<strong>基于哈希</strong>的分片方式（随机平均分配）或者<strong>基于范围</strong>的分片方式（数值大小分配） 。</p><blockquote><p>用什么字段当片键都可以，如：nickname作为片键，但一定是必填字段。</p></blockquote><p><a name="TZYmz"></a></p><h3 id="分片策略-规则"><a href="#分片策略-规则" class="headerlink" title="分片策略(规则)"></a>分片策略(规则)</h3><p><a name="aK3kn"></a></p><h4 id="哈希策略"><a href="#哈希策略" class="headerlink" title="哈希策略"></a>哈希策略</h4><p>对于 <strong>基于哈希</strong> 的分片 , MongoDB计算一个字段的哈希值, 并用这个哈希值来创建数据块.<br />在使用基于哈希分片的系统中, 拥有”相近”片键的文档<strong>很可能不会</strong>存储在同一个数据块中, 因此<strong>数据的分离性</strong>更好一些.<br><a name="t8DEJ"></a></p><h4 id="范围策略"><a href="#范围策略" class="headerlink" title="范围策略"></a>范围策略</h4><p>对于 <strong>基于范围</strong> 的分片 , MongoDB 按照片键的范围把数据分成不同部分. 假设有一个数字的片键 : 想象一个从负无穷到正无穷的直线,每一个片键的值都在直线上画了一个点. MongoDB把这条直线划分为更短的不重叠的片段, 并称之为数据块 ,每个数据块包含了片键在一定范围内的数据.<br />在使用片键做范围划分的系统中, 拥有”相近”片键的文档<strong>很可能存储在同一个数据块</strong>中, 因此也会存储在同一个分片中.<br><a name="t1icD"></a></p><h4 id="基于范围的分片方式与基于哈希的分片方式性能对比"><a href="#基于范围的分片方式与基于哈希的分片方式性能对比" class="headerlink" title="基于范围的分片方式与基于哈希的分片方式性能对比"></a>基于范围的分片方式与基于哈希的分片方式性能对比</h4><p>基于范围的分片方式提供了更高效的范围查询, 给定一个片键的范围,分发路由可以很简单地确定哪个数 据块存储了请求需要的数据,并将请求转发到相应的分片中. 不过, 基于范围的分片会导致数据在不同分片上的不均衡,有时候,带来的消极作用会大于查询性能的积极作用. 比如, 如果片键所在的字段是线性增长的, 一定时间内的所有请求都会落到某个固定的数据块中, 最终导致分布在同一个分片中. 在这种情况下, 一小部分分片承载了集群大部分的数据,系统并不能很好地进行 扩展. 与此相比, 基于哈希的分片方式以范围查询性能的损失为代价, 保证了集群中数据的均衡.哈希值的随机性 使数据随机分布在每个数据块中, 因此也随机分布在不同分片中.但是也正由于随机性, 一个范围查询很难 确定应该请求哪些分片, 通常为了返回需要的结果,需要请求所有分片.<br />如无特殊情况，一般推荐使用 <code>Hash Sharding</code>. 而使用<code> _id</code> 作为片键是一个不错的选择，因为它是必有的，你可以使用数据文档 <code>_id</code> 的哈希作为片键。 这个方案能够是的读和写都能够平均分布，并且它能够保证每个文档都有不同的片键所以数据块能够很 精细。 似乎还是不够完美，因为这样的话对多个文档的查询必将命中所有的分片。虽说如此，这也是一种比较 好的方案了。 理想化的<code> shard key</code> 可以让 documents 均匀地在集群中分布<br><a name="twyaG"></a></p><h2 id="3-安全认证"><a href="#3-安全认证" class="headerlink" title="3. 安全认证"></a>3. 安全认证</h2><p><a name="Zkta3"></a></p><h3 id="3-1-MongoDB的用户和角色权限简介"><a href="#3-1-MongoDB的用户和角色权限简介" class="headerlink" title="3.1 MongoDB的用户和角色权限简介"></a>3.1 MongoDB的用户和角色权限简介</h3><p>默认情况下，MongoDB实例启动运行时是没有启用用户访问权限控制的，也就是说，在实例本机服务 器上都可以随意连接到实例进行各种操作，MongoDB不会对连接客户端进行用户验证，这是非常危险 的。<br />mongodb官网上说，为了能保障mongodb的安全可以做以下几个步骤</p><ol><li>使用新的端口，默认的 27017 端口如果一旦知道了 ip 就能连接上，不太安全</li><li>设置 mongodb 的网络环境，最好将 mongodb 部署到公司服务器内网，这样外网是访问不到的。公 司内部访问使用 vpn 等</li><li>开启安全认证。认证要同时设置服务器之间的内部认证方式，同时要设置客户端连接到集群的账号 密码认证方式。</li></ol><p>为了强制开启用户访问控制(用户验证)，则需要在MongoDB实例启动时使用选项 –auth 或在指定启动 配置文件中添加选项<code> auth=true</code><br />在开始之前需要了解一下概念<br><a name="yG8z5"></a></p><h4 id="启用访问控制"><a href="#启用访问控制" class="headerlink" title="启用访问控制"></a>启用访问控制</h4><ul><li>MongoDB使用的是基于角色的访问控制(Role-Based Access Control,RBAC)来管理用户对实例的访问。 通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限，在对用户分配 角色之前，用户无法访问实例</li><li>在实例启动时添加选项 –auth 或指定启动配置文件中添加选项<code> auth=true</code><br><a name="l5mbB"></a><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4>在MongoDB中通过角色对用户授予相应数据库资源的操作权限，每个角色当中的权限可以显式指定， 也可以通过继承其他角色的权限，或者两都都存在的权限。<br><a name="F0hhY"></a><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4>权限由指定的数据库资源(resource)以及允许在指定资源上进行的操作(action)组成</li></ul><ol><li>资源(resource)包括：数据库、集合、部分集合和集群</li><li>操作(action)包括：对资源进行的增、删、改、查(CRUD)操作</li></ol><p>在角色定义时可以包含一个或多个已存在的角色，新创建的角色会继承包含的角色所有的权限。在同一 个数据库中，新创建角色可以继承其他角色的权限，在 admin 数据库中创建的角色可以继承在其它任意 数据库中角色的权限。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询所有角色权限(仅用户自定义角色)</span><br><span class="line">$ db.runCommand(&#123; rolesInfo: 1 &#125;)</span><br><span class="line"></span><br><span class="line"># 查询所有角色权限(包含内置角色)</span><br><span class="line">$ db.runCommand(&#123; rolesInfo: 1, showBuiltinRoles: true &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询当前数据库中的某角色的权限</span><br><span class="line">$ db.runCommand(&#123; rolesInfo: &quot;&lt;rolename&gt;&quot; &#125;)</span><br><span class="line"></span><br><span class="line"># 查询其它数据库中指定的角色权限</span><br><span class="line">$ db.runCommand(&#123; rolesInfo: &#123; role: &quot;&lt;rolename&gt;&quot;, db: &quot;&lt;database&gt;&quot; &#125; &#125;</span><br><span class="line"></span><br><span class="line"># 查询多个角色权限</span><br><span class="line">$ db.runCommand(&#123;</span><br><span class="line">  rolesInfo: [</span><br><span class="line">    &quot;&lt;rolename&gt;&quot;,</span><br><span class="line">    &#123;</span><br><span class="line">      role: &quot;&lt;rolename&gt;&quot;,</span><br><span class="line">      db: &quot;&lt;database&gt;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>常用的内置角色：</p><ul><li>数据库用户角色：read、readWrite</li><li>所有数据库用户角色：readAnyDatabase、readWriteAnyDatabase、 userAdminAnyDatabase、dbAdminAnyDatabase</li><li>数据库管理角色： dbAdmin、dbOwner、userAdmin</li><li>集群管理角色： clusterAdmin、clusterManager、clusterMonitor、hostManager</li><li>备份恢复角色： backup、restore</li><li>超级用户角色： root</li><li>内部角色： system</li></ul><p><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200516223618830.png#crop=0&crop=0&crop=1&crop=1&from=url&id=l74P2&margin=%5Bobject%20Object%5D&originHeight=701&originWidth=838&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />剩下的内容看文档吧 -.-!!<br><a name="N1laR"></a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.bilibili.com/video/BV1bJ411x7mq">https://www.bilibili.com/video/BV1bJ411x7mq</a></li><li><a href="https://www.jianshu.com/p/916e5e443ad7">分布式一致性协议在 MongoDB 选举中的应用</a></li></ul>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>面试题(0)</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/%E9%9D%A2%E8%AF%95/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-29T06:37:29.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="面试题收集"><a href="#面试题收集" class="headerlink" title="面试题收集"></a>面试题收集</h2><p><br /><a href="https://docs.qq.com/doc/DRFJIbFdwWk1Uc01R">https://docs.qq.com/doc/DRFJIbFdwWk1Uc01R</a><br><a name="5220f3ba"></a></p><h2 id="一、项目注意事项与发布流程演示"><a href="#一、项目注意事项与发布流程演示" class="headerlink" title="一、项目注意事项与发布流程演示"></a>一、项目注意事项与发布流程演示</h2><p><a name="1bbbb204"></a></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>Nacos要开启授权认证</li><li>在公司中配置文件中的账号密码相关的配置会加密处理，还有数据库里面的隐私信息会加密存储</li></ul><p><a href="http://81.70.250.203:8080/">http://81.70.250.203:8080/</a><br><a name="d4d98273"></a></p><h2 id="二、问题解答"><a href="#二、问题解答" class="headerlink" title="二、问题解答"></a>二、问题解答</h2><p><a name="67aa5ddb"></a></p><h3 id="JAVA八大基本数据类型"><a href="#JAVA八大基本数据类型" class="headerlink" title="JAVA八大基本数据类型"></a>JAVA八大基本数据类型</h3><p>int long short double float char byte boolean<br><a name="5412a66a"></a></p><h3 id="1、Redis缓存满了，会报什么错误？"><a href="#1、Redis缓存满了，会报什么错误？" class="headerlink" title="1、Redis缓存满了，会报什么错误？"></a>1、Redis缓存满了，会报什么错误？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set maxmemory 1</span><br><span class="line">(error) OOM command not allowed when used memory &gt; &#x27;maxmemory&#x27;.</span><br></pre></td></tr></table></figure><p><a name="7c48289e"></a></p><h3 id="2、支付完成后，支付方钱扣除，但是支付状态未修改为待收货，怎么去预防这个问题"><a href="#2、支付完成后，支付方钱扣除，但是支付状态未修改为待收货，怎么去预防这个问题" class="headerlink" title="2、支付完成后，支付方钱扣除，但是支付状态未修改为待收货，怎么去预防这个问题"></a>2、支付完成后，支付方钱扣除，但是支付状态未修改为待收货，怎么去预防这个问题</h3><blockquote><p>使用支付厂商的支付状态查询接口，主动去调用。xxl-job</p></blockquote><p><a name="4141a318"></a></p><h3 id="3、Token如何设置多久过期时间，并且如何续时"><a href="#3、Token如何设置多久过期时间，并且如何续时" class="headerlink" title="3、Token如何设置多久过期时间，并且如何续时"></a>3、Token如何设置多久过期时间，并且如何续时</h3><p>30分钟一般<br /> <br><a name="b206bff9"></a></p><h3 id="4、秒杀中会遇到那些问题？怎么解决？"><a href="#4、秒杀中会遇到那些问题？怎么解决？" class="headerlink" title="4、秒杀中会遇到那些问题？怎么解决？"></a>4、秒杀中会遇到那些问题？怎么解决？</h3><p>超卖<br />分布式锁时间问题 redisson  LUA脚本<br><a name="fd22fdcc"></a></p><h3 id="5、int数据类型问题（笔试常见）"><a href="#5、int数据类型问题（笔试常见）" class="headerlink" title="5、int数据类型问题（笔试常见）"></a>5、int数据类型问题（笔试常见）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Integer num1 = 20;</span><br><span class="line">Integer num2 = 20;</span><br><span class="line">System.out.println(num1 == num2);</span><br><span class="line">Integer num3 = 200;</span><br><span class="line">Integer num4 = 200;</span><br><span class="line">System.out.println(num3 == num4);</span><br></pre></td></tr></table></figure><p><a name="6b3c39fe"></a></p><h3 id="6、栈存在GC吗"><a href="#6、栈存在GC吗" class="headerlink" title="6、栈存在GC吗"></a>6、栈存在GC吗</h3><p>栈中存在垃圾回收吗？<br /><strong>不存在GC ; 存在OOM</strong><br><a name="d71fd62c"></a></p><h3 id="7、栈的默认大小"><a href="#7、栈的默认大小" class="headerlink" title="7、栈的默认大小"></a>7、栈的默认大小</h3><p>jdk5.0之前，默认栈大小:256k jdk5.0之后，默认栈大小: 1024k( linux \windows )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zdww.tcm.test;</span><br><span class="line">public class StackErrorTest &#123;</span><br><span class="line">    private static int count = 1;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //try &#123;</span><br><span class="line">        //    Thread.sleep(10000);</span><br><span class="line">        //&#125; catch (InterruptedException e) &#123;</span><br><span class="line">        //    e.printStackTrace();</span><br><span class="line">        //&#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            count++;</span><br><span class="line">            main(args);</span><br><span class="line">        &#125;catch (Throwable e)&#123;</span><br><span class="line">            System.out.println(&quot;递归的次数为：&quot; + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jps</span><br><span class="line"># 找到进程id</span><br><span class="line">jinfo -flag ThreadStackSize 进程号</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xss512K</span><br></pre></td></tr></table></figure><p><a name="0c06a56c"></a></p><h3 id="8、volatile关键字的合理使用"><a href="#8、volatile关键字的合理使用" class="headerlink" title="8、volatile关键字的合理使用"></a>8、volatile关键字的合理使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zdww.tcm.test;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">// -Xint</span><br><span class="line">public class VolatileSeeDemo &#123;</span><br><span class="line">      static boolean flag = true;       //不加volatile，没有可见性</span><br><span class="line">     // static volatile boolean flag = true;       //加了volatile，保证可见性</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;\t come in&quot;);</span><br><span class="line">            while (flag) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;\t flag被修改为false,退出.....&quot;);</span><br><span class="line">        &#125;, &quot;t1&quot;).start();</span><br><span class="line">        //暂停2秒钟后让main线程修改flag值</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(2);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag = false;</span><br><span class="line">        new Thread(() -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(200);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;-----------&quot; + flag);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(&quot;main线程修改完成&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="67d48a99"></a></p><h3 id="9、Spring事务失效场景"><a href="#9、Spring事务失效场景" class="headerlink" title="9、Spring事务失效场景"></a>9、Spring事务失效场景</h3><p><a name="679048fa"></a></p><h4 id="1-抛出检查异常导致事务不能正确回滚"><a href="#1-抛出检查异常导致事务不能正确回滚" class="headerlink" title="1. 抛出检查异常导致事务不能正确回滚"></a><strong>1. 抛出检查异常导致事务不能正确回滚</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service1 &#123;</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     private AccountMapper accountMapper;</span><br><span class="line"> </span><br><span class="line">     @Transactional</span><br><span class="line">     public void transfer(int from, int to, int amount) throws FileNotFoundException &#123;</span><br><span class="line">         int fromBalance = accountMapper.findBalanceBy(from);</span><br><span class="line">         if (fromBalance - amount &gt;= 0) &#123;</span><br><span class="line">             accountMapper.update(from, -1 * amount);</span><br><span class="line">             new FileInputStream(&quot;aaa&quot;);</span><br><span class="line">             accountMapper.update(to, amount);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>原因：Spring 默认只会回滚非检查异常<br /></li><li>解法：配置 rollbackFor 属性<ul><li><code>@Transactional(rollbackFor = Exception.class)</code></li></ul></li></ul><p><a name="b54a33b7"></a></p><h4 id="2-业务方法内自己-try-catch-异常导致事务不能正确回滚"><a href="#2-业务方法内自己-try-catch-异常导致事务不能正确回滚" class="headerlink" title="2. 业务方法内自己 try-catch 异常导致事务不能正确回滚"></a><strong>2. 业务方法内自己 try-catch 异常导致事务不能正确回滚</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service2 &#123;</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     private AccountMapper accountMapper;</span><br><span class="line"> </span><br><span class="line">     @Transactional(rollbackFor = Exception.class)</span><br><span class="line">     public void transfer(int from, int to, int amount)  &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">             int fromBalance = accountMapper.findBalanceBy(from);</span><br><span class="line">             if (fromBalance - amount &gt;= 0) &#123;</span><br><span class="line">                 accountMapper.update(from, -1 * amount);</span><br><span class="line">                 new FileInputStream(&quot;aaa&quot;);</span><br><span class="line">                 accountMapper.update(to, amount);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>原因：事务通知只有捉到了目标抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉<br /></li><li>解法1：异常原样抛出<ul><li>在 catch 块添加 <code>throw new RuntimeException(e);</code></li></ul></li><li>解法2：手动设置 TransactionStatus.setRollbackOnly()<ul><li>在 catch 块添加 <code>TransactionInterceptor.currentTransactionStatus().setRollbackOnly();</code></li></ul></li></ul><p><a name="22adca4c"></a></p><h4 id="3-aop-切面顺序导致导致事务不能正确回滚"><a href="#3-aop-切面顺序导致导致事务不能正确回滚" class="headerlink" title="3. aop 切面顺序导致导致事务不能正确回滚"></a><strong>3. aop 切面顺序导致导致事务不能正确回滚</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service3 &#123;</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     private AccountMapper accountMapper;</span><br><span class="line"> </span><br><span class="line">     @Transactional(rollbackFor = Exception.class)</span><br><span class="line">     public void transfer(int from, int to, int amount) throws FileNotFoundException &#123;</span><br><span class="line">         int fromBalance = accountMapper.findBalanceBy(from);</span><br><span class="line">         if (fromBalance - amount &gt;= 0) &#123;</span><br><span class="line">             accountMapper.update(from, -1 * amount);</span><br><span class="line">             new FileInputStream(&quot;aaa&quot;);</span><br><span class="line">             accountMapper.update(to, amount);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Aspect</span><br><span class="line"> public class MyAspect &#123;</span><br><span class="line">     @Around(&quot;execution(* transfer(..))&quot;)</span><br><span class="line">     public Object around(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">         LoggerUtils.get().debug(&quot;log:&#123;&#125;&quot;, pjp.getTarget());</span><br><span class="line">         try &#123;</span><br><span class="line">             return pjp.proceed();</span><br><span class="line">         &#125; catch (Throwable e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">             return null;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>原因：事务切面优先级最低，但如果自定义的切面优先级和他一样，则还是自定义切面在内层，这时若自定义切面没有正确抛出异常…</li><li>解法1、2：同情况2 中的解法:1、2</li><li>解法3：调整切面顺序，在 MyAspect 上添加 <code>@Order(Ordered.LOWEST_PRECEDENCE - 1)</code> （不推荐）</li></ul><p><a name="d04984cf"></a></p><h4 id="4-非-public-方法导致的事务失效"><a href="#4-非-public-方法导致的事务失效" class="headerlink" title="4. 非 public 方法导致的事务失效"></a><strong>4. 非 public 方法导致的事务失效</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service4 &#123;</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     private AccountMapper accountMapper;</span><br><span class="line"> </span><br><span class="line">     @Transactional</span><br><span class="line">     void transfer(int from, int to, int amount) throws FileNotFoundException &#123;</span><br><span class="line">         int fromBalance = accountMapper.findBalanceBy(from);</span><br><span class="line">         if (fromBalance - amount &gt;= 0) &#123;</span><br><span class="line">             accountMapper.update(from, -1 * amount);</span><br><span class="line">             accountMapper.update(to, amount);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>原因：Spring 为方法创建代理、添加事务通知、前提条件都是该方法是 public 的</li><li>解法1：改为 public 方法</li><li>解法2：添加 bean 配置如下（不推荐）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line"> public TransactionAttributeSource transactionAttributeSource() &#123;</span><br><span class="line">     return new AnnotationTransactionAttributeSource(false);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a name="3272d06c"></a></p><h4 id="5-父子容器导致的事务失效"><a href="#5-父子容器导致的事务失效" class="headerlink" title="5. 父子容器导致的事务失效"></a><strong>5. 父子容器导致的事务失效</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service5 &#123;</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     private AccountMapper accountMapper;</span><br><span class="line"> </span><br><span class="line">     @Transactional(rollbackFor = Exception.class)</span><br><span class="line">     public void transfer(int from, int to, int amount) throws FileNotFoundException &#123;</span><br><span class="line">         int fromBalance = accountMapper.findBalanceBy(from);</span><br><span class="line">         if (fromBalance - amount &gt;= 0) &#123;</span><br><span class="line">             accountMapper.update(from, -1 * amount);</span><br><span class="line">             accountMapper.update(to, amount);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>控制器类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line"> public class AccountController &#123;</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     public Service5 service;</span><br><span class="line"> </span><br><span class="line">     public void transfer(int from, int to, int amount) throws FileNotFoundException &#123;</span><br><span class="line">         service.transfer(from, to, amount);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>App 配置类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"> @ComponentScan(&quot;tx.app.service&quot;)</span><br><span class="line"> @EnableTransactionManagement</span><br><span class="line"> // ...</span><br><span class="line"> public class AppConfig &#123;</span><br><span class="line">     // ... 有事务相关配置</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Web 配置类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"> @ComponentScan(&quot;tx.app&quot;)</span><br><span class="line"> // ...</span><br><span class="line"> public class WebConfig &#123;</span><br><span class="line">     // ... 无事务配置</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>现在配置了父子容器，WebConfig 对应子容器，AppConfig 对应父容器，发现事务依然失效</p><ul><li>原因：子容器扫描范围过大，把未加事务配置的 service 扫描进来</li><li>解法1：各扫描各的，不要图简便</li><li>解法2：不要用父子容器，所有 bean 放在同一容器</li></ul><p><a name="c0555a1f"></a></p><h4 id="6-调用本类方法导致传播行为失效"><a href="#6-调用本类方法导致传播行为失效" class="headerlink" title="6. 调用本类方法导致传播行为失效"></a><strong>6. 调用本类方法导致传播行为失效</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service6 &#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span><br><span class="line">     public void foo() throws FileNotFoundException &#123;</span><br><span class="line">         LoggerUtils.get().debug(&quot;foo&quot;);</span><br><span class="line">         this.bar();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span><br><span class="line">     public void bar() throws FileNotFoundException &#123;</span><br><span class="line">         LoggerUtils.get().debug(&quot;bar&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>原因：本类方法调用不经过代理，因此无法增强</li><li>解法1：依赖注入自己（代理）来调用</li><li>解法2：通过 AopContext 拿到代理对象，来调用</li><li>解法3：通过 CTW，LTW 实现功能增强</li></ul><p>解法1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service6 &#123;</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     private Service6 proxy; // 本质上是一种循环依赖</span><br><span class="line"> </span><br><span class="line">     @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span><br><span class="line">     public void foo() throws FileNotFoundException &#123;</span><br><span class="line">         LoggerUtils.get().debug(&quot;foo&quot;);</span><br><span class="line">         System.out.println(proxy.getClass());</span><br><span class="line">         proxy.bar();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span><br><span class="line">     public void bar() throws FileNotFoundException &#123;</span><br><span class="line">         LoggerUtils.get().debug(&quot;bar&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>解法2，还需要在 AppConfig 上添加 <code>@EnableAspectJAutoProxy(exposeProxy = true)</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service6 &#123;</span><br><span class="line">     </span><br><span class="line">     @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span><br><span class="line">     public void foo() throws FileNotFoundException &#123;</span><br><span class="line">         LoggerUtils.get().debug(&quot;foo&quot;);</span><br><span class="line">         ((Service6) AopContext.currentProxy()).bar();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)</span><br><span class="line">     public void bar() throws FileNotFoundException &#123;</span><br><span class="line">         LoggerUtils.get().debug(&quot;bar&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a name="1e6c6106"></a></p><h4 id="7-Transactional-没有保证原子行为"><a href="#7-Transactional-没有保证原子行为" class="headerlink" title="7. @Transactional 没有保证原子行为"></a><strong>7. @Transactional 没有保证原子行为</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service7 &#123;</span><br><span class="line"> </span><br><span class="line">     private static final Logger logger = LoggerFactory.getLogger(Service7.class);</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     private AccountMapper accountMapper;</span><br><span class="line"> </span><br><span class="line">     @Transactional(rollbackFor = Exception.class)</span><br><span class="line">     public void transfer(int from, int to, int amount) &#123;</span><br><span class="line">         int fromBalance = accountMapper.findBalanceBy(from);</span><br><span class="line">         logger.debug(&quot;更新前查询余额为: &#123;&#125;&quot;, fromBalance);</span><br><span class="line">         if (fromBalance - amount &gt;= 0) &#123;</span><br><span class="line">             accountMapper.update(from, -1 * amount);</span><br><span class="line">             accountMapper.update(to, amount);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public int findBalance(int accountNo) &#123;</span><br><span class="line">         return accountMapper.findBalanceBy(accountNo);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面的代码实际上是有 bug 的，假设 from 余额为 1000，两个线程都来转账 1000，可能会出现扣减为负数的情况</p><ul><li>原因：事务的原子性仅涵盖 insert、update、delete、select … for update 语句，select 方法并不阻塞</li></ul><ul><li>如上图所示，红色线程和蓝色线程的查询都发生在扣减之前，都以为自己有足够的余额做扣减</li></ul><p><a name="68f5344d"></a></p><h4 id="8-Transactional-方法导致的-synchronized-失效"><a href="#8-Transactional-方法导致的-synchronized-失效" class="headerlink" title="8. @Transactional 方法导致的 synchronized 失效"></a><strong>8. @Transactional 方法导致的 synchronized 失效</strong></h4><p>针对上面的问题，能否在方法上加 synchronized 锁来解决呢？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"> public class Service7 &#123;</span><br><span class="line"> </span><br><span class="line">     private static final Logger logger = LoggerFactory.getLogger(Service7.class);</span><br><span class="line"> </span><br><span class="line">     @Autowired</span><br><span class="line">     private AccountMapper accountMapper;</span><br><span class="line"> </span><br><span class="line">     @Transactional(rollbackFor = Exception.class)</span><br><span class="line">     public synchronized void transfer(int from, int to, int amount) &#123;</span><br><span class="line">         int fromBalance = accountMapper.findBalanceBy(from);</span><br><span class="line">         logger.debug(&quot;更新前查询余额为: &#123;&#125;&quot;, fromBalance);</span><br><span class="line">         if (fromBalance - amount &gt;= 0) &#123;</span><br><span class="line">             accountMapper.update(from, -1 * amount);</span><br><span class="line">             accountMapper.update(to, amount);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public int findBalance(int accountNo) &#123;</span><br><span class="line">         return accountMapper.findBalanceBy(accountNo);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>答案是不行，原因如下：</p><ul><li>synchronized 保证的仅是目标方法的原子性，环绕目标方法的还有 commit 等操作，它们并未处于 sync 块内</li><li>可以参考下图发现，蓝色线程的查询只要在红色线程提交之前执行，那么依然会查询到有 1000 足够余额来转账</li></ul><ul><li>解法1：synchronized 范围应扩大至代理方法调用</li><li>解法2：使用 select … for update 替换 select<br><a name="f8ef3298"></a></li></ul><h3 id="10、线程池合理配置"><a href="#10、线程池合理配置" class="headerlink" title="10、线程池合理配置"></a>10、线程池合理配置</h3><p><a href="https://blog.xueqimiao.com/juc/f1988c/">https://blog.xueqimiao.com/juc/f1988c/</a><br><a name="4904e945"></a></p><h3 id="11、时间装换SimpleDateFormat带来的线程安全问题"><a href="#11、时间装换SimpleDateFormat带来的线程安全问题" class="headerlink" title="11、时间装换SimpleDateFormat带来的线程安全问题"></a>11、时间装换SimpleDateFormat带来的线程安全问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.zdww.tcm.test;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">public class DateUtils &#123;</span><br><span class="line">    public static final SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    /**</span><br><span class="line">     * 模拟并发环境下使用SimpleDateFormat的parse方法将字符串转换成Date对象</span><br><span class="line">     *</span><br><span class="line">     * @param stringDate</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static Date parseDate(String stringDate) throws Exception &#123;</span><br><span class="line">        return sdf.parse(stringDate);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        for (int i = 1; i &lt;= 30; i++) &#123;</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    System.out.println(DateUtils.parseDate(&quot;2022-07-19 09:03:06&quot;));</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决：<a href="https://blog.xueqimiao.com/juc/104a1e/">https://blog.xueqimiao.com/juc/104a1e/</a><br /> <br><a name="67d57380"></a></p><h3 id="12、线程几个状态之间，相互转换的过程？"><a href="#12、线程几个状态之间，相互转换的过程？" class="headerlink" title="12、线程几个状态之间，相互转换的过程？"></a>12、线程几个状态之间，相互转换的过程？</h3><p><strong>要求</strong></p><ul><li>掌握 Java 线程六种状态</li><li>掌握 Java 线程状态转换</li><li>能理解五种状态与六种状态两种说法的区别</li></ul><p><strong>六种状态及转换</strong><br /><img src="../super-knowledge-base/%E6%9E%B6%E6%9E%84%E5%B8%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/images/2.%E6%9E%B6%E6%9E%84%E5%B8%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF2/image-20210831090722658-3878885.png#"><br />分别是</p><ul><li>新建<ul><li>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态</li><li>此时未与操作系统底层线程关联</li></ul></li><li>可运行<ul><li>调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong></li><li>此时与底层线程关联，由操作系统调度执行</li></ul></li><li>终结<ul><li>线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong></li><li>此时会取消与底层线程关联</li></ul></li><li>阻塞<ul><li>当获取锁失败后，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，此时不占用 cpu 时间</li><li>当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</li></ul></li><li>等待<ul><li>当获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合<strong>等待</strong>，同样不占用 cpu 时间</li><li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>等待</strong>线程，恢复为<strong>可运行</strong>状态</li></ul></li><li>有时限等待<ul><li>当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合进行<strong>有时限等待</strong>，同样不占用 cpu 时间</li><li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>有时限等待</strong>线程，恢复为<strong>可运行</strong>状态，并重新去竞争锁</li><li>如果等待超时，也会从<strong>有时限等待</strong>状态恢复为<strong>可运行</strong>状态，并重新去竞争锁</li><li>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</li></ul></li></ul><blockquote><p><strong><em>其它情况（只需了解）</em></strong></p><ul><li>可以用 interrupt() 方法打断<strong>等待</strong>、<strong>有时限等待</strong>的线程，让它们恢复为<strong>可运行</strong>状态</li><li>park，unpark 等方法也可以让线程等待和唤醒</li></ul></blockquote><p><strong>五种状态</strong><br />五种状态的说法来自于操作系统层面的划分<br /><img src="../super-knowledge-base/%E6%9E%B6%E6%9E%84%E5%B8%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/images/2.%E6%9E%B6%E6%9E%84%E5%B8%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF2/image-20210831092652602-3878889.png#"></p><ul><li>运行态：分到 cpu 时间，能真正执行线程内代码的<br /></li><li>就绪态：有资格分到 cpu 时间，但还未轮到它的<br /></li><li>阻塞态：没资格分到 cpu 时间的<ul><li>涵盖了 java 状态中提到的<strong>阻塞</strong>、<strong>等待</strong>、<strong>有时限等待</strong></li><li>多出了阻塞 I/O，指线程在调用阻塞 I/O 时，实际活由 I/O 设备完成，此时线程无事可做，只能干等</li></ul></li><li>新建与终结态：与 java 中同名状态类似，不再啰嗦<br /></li></ul><p><a name="35ca9dc9"></a></p><h3 id="13、线程池"><a href="#13、线程池" class="headerlink" title="13、线程池"></a>13、线程池</h3><p><strong>要求</strong></p><ul><li>掌握线程池的 7 大核心参数</li></ul><p><strong>七大参数</strong></p><ol><li>corePoolSize 核心线程数目 - 池中会保留的最多线程数<br /></li><li>maximumPoolSize 最大线程数目 - 核心线程+救急线程的最大数目<br /></li><li>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放<br /></li><li>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等<br /></li><li>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务<br /></li><li>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等<br /></li><li>handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略<ol><li>抛异常 java.util.concurrent.ThreadPoolExecutor.AbortPolicy</li><li>由调用者执行任务 java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy</li><li>丢弃任务 java.util.concurrent.ThreadPoolExecutor.DiscardPolicy</li><li>丢弃最早排队任务 java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy</li></ol></li></ol><p><img src="../super-knowledge-base/%E6%9E%B6%E6%9E%84%E5%B8%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/images/2.%E6%9E%B6%E6%9E%84%E5%B8%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF2/image-20210831093204388-3878893.png#"></p><blockquote><p><strong><em>代码说明</em></strong><br>TestThreadPoolExecutor 以较为形象的方式演示了线程池的核心组成</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.slf4j.Logger;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line">import java.util.stream.IntStream;</span><br><span class="line">import static day02.LoggerUtils.*;</span><br><span class="line">// --add-opens java.base/java.util.concurrent=ALL-UNNAMED</span><br><span class="line">public class TestThreadPoolExecutor &#123;</span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">  AtomicInteger c = new AtomicInteger(1);</span><br><span class="line">  ArrayBlockingQueue&lt;Runnable&gt; queue = new ArrayBlockingQueue&lt;&gt;(2);</span><br><span class="line">  ThreadPoolExecutor threadPool = new ThreadPoolExecutor(</span><br><span class="line">          2,</span><br><span class="line">          3,</span><br><span class="line">          0,</span><br><span class="line">          TimeUnit.MILLISECONDS,</span><br><span class="line">          queue,</span><br><span class="line">          r -&gt; new Thread(r, &quot;myThread&quot; + c.getAndIncrement()),</span><br><span class="line">          new ThreadPoolExecutor.DiscardOldestPolicy());</span><br><span class="line">  showState(queue, threadPool);</span><br><span class="line">  threadPool.submit(new MyTask(&quot;1&quot;, 3600000));</span><br><span class="line">  showState(queue, threadPool);</span><br><span class="line">  threadPool.submit(new MyTask(&quot;2&quot;, 3600000));</span><br><span class="line">  showState(queue, threadPool);</span><br><span class="line">  threadPool.submit(new MyTask(&quot;3&quot;));</span><br><span class="line">  showState(queue, threadPool);</span><br><span class="line">  threadPool.submit(new MyTask(&quot;4&quot;));</span><br><span class="line">  showState(queue, threadPool);</span><br><span class="line">  threadPool.submit(new MyTask(&quot;5&quot;, 3600000));</span><br><span class="line">  showState(queue, threadPool);</span><br><span class="line">  threadPool.submit(new MyTask(&quot;6&quot;));</span><br><span class="line">  showState(queue, threadPool);</span><br><span class="line">&#125;</span><br><span class="line">private static void showState(ArrayBlockingQueue&lt;Runnable&gt; queue, ThreadPoolExecutor threadPool) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">      Thread.sleep(300);</span><br><span class="line">  &#125; catch (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  List&lt;Object&gt; tasks = new ArrayList&lt;&gt;();</span><br><span class="line">  for (Runnable runnable : queue) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          Field callable = FutureTask.class.getDeclaredField(&quot;callable&quot;);</span><br><span class="line">          callable.setAccessible(true);</span><br><span class="line">          Object adapter = callable.get(runnable);</span><br><span class="line">          Class&lt;?&gt; clazz = Class.forName(&quot;java.util.concurrent.Executors$RunnableAdapter&quot;);</span><br><span class="line">          Field task = clazz.getDeclaredField(&quot;task&quot;);</span><br><span class="line">          task.setAccessible(true);</span><br><span class="line">          Object o = task.get(adapter);</span><br><span class="line">          tasks.add(o);</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  main.debug(&quot;pool size: &#123;&#125;, queue: &#123;&#125;&quot;, threadPool.getPoolSize(), tasks);</span><br><span class="line">&#125;</span><br><span class="line">static class MyTask implements Runnable &#123;</span><br><span class="line">  private final String name;</span><br><span class="line">  private final long duration;</span><br><span class="line">  public MyTask(String name) &#123;</span><br><span class="line">      this(name, 0);</span><br><span class="line">  &#125;</span><br><span class="line">  public MyTask(String name, long duration) &#123;</span><br><span class="line">      this.name = name;</span><br><span class="line">      this.duration = duration;</span><br><span class="line">  &#125;</span><br><span class="line">  @Override</span><br><span class="line">  public void run() &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          LoggerUtils.get(&quot;myThread&quot;).debug(&quot;running...&quot; + this);</span><br><span class="line">          Thread.sleep(duration);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @Override</span><br><span class="line">  public String toString() &#123;</span><br><span class="line">      return &quot;MyTask(&quot; + name + &quot;)&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> </p></blockquote><p><a name="627f173f"></a></p><h3 id="14、wait-vs-sleep"><a href="#14、wait-vs-sleep" class="headerlink" title="14、wait vs sleep"></a>14、wait vs sleep</h3><p><strong>要求</strong></p><ul><li>能够说出二者区别</li></ul><p><strong>一个共同点，三个不同点</strong><br />共同点</p><ul><li>wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态</li></ul><p>不同点</p><ul><li>方法归属不同<ul><li>sleep(long) 是 Thread 的静态方法</li><li>而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有</li></ul></li><li>醒来时机不同<ul><li>执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来</li><li>wait(long) 和 wait() 还可以被 notify 唤醒，wait() 如果不唤醒就一直等下去</li><li>它们都可以被打断唤醒</li></ul></li><li>锁特性不同（重点）<ul><li>wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制</li><li>wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）</li><li>而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（我放弃 cpu，你们也用不了）</li></ul></li></ul><p><a name="9c9321c4"></a></p><h3 id="15、lock-vs-synchronized"><a href="#15、lock-vs-synchronized" class="headerlink" title="15、lock vs synchronized"></a>15、lock vs synchronized</h3><p><strong>要求</strong></p><ul><li>掌握 lock 与 synchronized 的区别</li><li>理解 ReentrantLock 的公平、非公平锁</li><li>理解 ReentrantLock 中的条件变量</li></ul><p><strong>三个层面</strong><br />不同点</p><ul><li>语法层面<ul><li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现</li><li>Lock 是接口，源码由 jdk 提供，用 java 语言实现</li><li>使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁</li></ul></li><li>功能层面<ul><li>二者均属于<strong>悲观锁</strong>、都具备基本的互斥、同步、锁重入功能</li><li>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量</li><li>Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock</li></ul></li><li>性能层面<ul><li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li><li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li></ul></li></ul><p><strong>公平锁</strong></p><ul><li>公平锁的公平体现<ul><li><strong>已经处在阻塞队列</strong>中的线程（不考虑超时）始终都是公平的，先进先出</li><li>公平锁是指<strong>未处于阻塞队列</strong>中的线程来争抢锁，如果队列不为空，则老实到队尾等待</li><li>非公平锁是指<strong>未处于阻塞队列</strong>中的线程来争抢锁，与队列头唤醒的线程去竞争，谁抢到算谁的</li></ul></li><li>公平锁会降低吞吐量，一般不用<br /></li></ul><p><strong>条件变量</strong></p><ul><li>ReentrantLock 中的条件变量功能类似于普通 synchronized 的 wait，notify，用在当线程获得锁后，发现条件不满足时，临时等待的链表结构</li><li>与 synchronized 的等待集合不同之处在于，ReentrantLock 中的条件变量可以有多个，可以实现更精细的等待、唤醒控制</li></ul><p> <br /> <br><a name="7227b351"></a></p><h3 id="16、volatile"><a href="#16、volatile" class="headerlink" title="16、volatile"></a>16、volatile</h3><p><strong>原子性</strong></p><ul><li>起因：多线程下，不同线程的<strong>指令发生了交错</strong>导致的共享变量的读写混乱</li><li>解决：用悲观锁或乐观锁解决，volatile 并不能解决原子性</li></ul><p><strong>可见性</strong></p><ul><li>起因：由于<strong>编译器优化、或缓存优化、或 CPU 指令重排序优化</strong>导致的对共享变量所做的修改另外的线程看不到</li><li>解决：用 volatile 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见</li></ul><p><strong>有序性</strong></p><ul><li>起因：由于<strong>编译器优化、或缓存优化、或 CPU 指令重排序优化</strong>导致指令的实际执行顺序与编写顺序不一致<br /></li><li>解决：用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果<br /></li><li>注意：<ul><li><strong>volatile 变量写</strong>加的屏障是阻止上方其它写操作越过屏障排到 <strong>volatile 变量写</strong>之下</li><li><strong>volatile 变量读</strong>加的屏障是阻止下方其它读操作越过屏障排到 <strong>volatile 变量读</strong>之上</li><li>volatile 读写加入的屏障只能防止同一线程内的指令重排</li></ul></li></ul><p><a name="8280bde7"></a></p><h3 id="17、悲观锁-vs-乐观锁"><a href="#17、悲观锁-vs-乐观锁" class="headerlink" title="17、悲观锁 vs 乐观锁"></a>17、悲观锁 vs 乐观锁</h3><p><strong>要求</strong></p><ul><li>掌握悲观锁和乐观锁的区别</li></ul><p><strong>对比悲观锁与乐观锁</strong></p><ul><li>悲观锁的代表是 synchronized 和 Lock 锁<ul><li>其核心思想是【线程只有占有了锁，才能去操作共享变量，每次只有一个线程占锁成功，获取锁失败的线程，都得停下来等待】</li><li>线程从运行到阻塞、再从阻塞到唤醒，涉及线程上下文切换，如果频繁发生，影响性能</li><li>实际上，线程在获取 synchronized 和 Lock 锁时，如果锁已被占用，都会做几次重试操作，减少阻塞的机会</li></ul></li><li>乐观锁的代表是 AtomicInteger，使用 cas 来保证原子性<ul><li>其核心思想是【无需加锁，每次只有一个线程能成功修改共享变量，其它失败的线程不需要停止，不断重试直至成功】</li><li>由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换</li><li>它需要多核 cpu 支持，且线程数不应超过 cpu 核数<br><a name="850fa395"></a></li></ul></li></ul><h3 id="18、Hashtable-vs-ConcurrentHashMap"><a href="#18、Hashtable-vs-ConcurrentHashMap" class="headerlink" title="18、Hashtable vs ConcurrentHashMap"></a>18、Hashtable vs ConcurrentHashMap</h3><p><strong>要求</strong></p><ul><li>掌握 Hashtable 与 ConcurrentHashMap 的区别</li><li>掌握 ConcurrentHashMap 在不同版本的实现区别</li></ul><p><strong>Hashtable 对比 ConcurrentHashMap</strong></p><ul><li>Hashtable 与 ConcurrentHashMap 都是线程安全的 Map 集合</li><li>Hashtable 并发度低，整个 Hashtable 对应一把锁，同一时刻，只能有一个线程操作它</li><li>ConcurrentHashMap 并发度高，整个 ConcurrentHashMap 对应多把锁，只要线程访问的是不同锁，那么不会冲突</li></ul><p><strong>ConcurrentHashMap 1.7</strong></p><ul><li>数据结构：<code>Segment(大数组) + HashEntry(小数组) + 链表</code>，每个 Segment 对应一把锁，如果多个线程访问不同的 Segment，则不会冲突<br /></li><li>并发度：Segment 数组大小即并发度，决定了同一时刻最多能有多少个线程并发访问。Segment 数组不能扩容，意味着并发度在 ConcurrentHashMap 创建时就固定了<br /></li><li>索引计算<ul><li>假设大数组长度是 $2^m$，key 在大数组内的索引是 key 的二次 hash 值的高 m 位</li><li>假设小数组长度是 $2^n$，key 在小数组内的索引是 key 的二次 hash 值的低 n 位</li></ul></li><li>扩容：每个小数组的扩容相对独立，小数组在超过扩容因子时会触发扩容，每次扩容翻倍<br /></li><li>Segment[0] 原型：首次创建其它小数组时，会以此原型为依据，数组长度，扩容因子都会以原型为准<br /></li></ul><p><strong>ConcurrentHashMap 1.8</strong></p><ul><li>数据结构：<code>Node 数组 + 链表或红黑树</code>，数组的每个头节点作为锁，如果多个线程访问的头节点不同，则不会冲突。首次生成头节点时如果发生竞争，利用 cas 而非 syncronized，进一步提升性能<br /></li><li>并发度：Node 数组有多大，并发度就有多大，与 1.7 不同，Node 数组可以扩容<br /></li><li>扩容条件：Node 数组满 3/4 时就会扩容<br /></li><li>扩容单位：以链表为单位从后向前迁移链表，迁移完成的将旧数组头节点替换为 ForwardingNode<br /></li><li>扩容时并发 get<ul><li>根据是否为 ForwardingNode 来决定是在新数组查找还是在旧数组查找，不会阻塞</li><li>如果链表长度超过 1，则需要对节点进行复制（创建新节点），怕的是节点迁移后 next 指针改变</li><li>如果链表最后几个元素扩容后索引不变，则节点无需复制</li></ul></li><li>扩容时并发 put<ul><li>如果 put 的线程与扩容线程操作的链表是同一个，put 线程会阻塞</li><li>如果 put 的线程操作的链表还未迁移完成，即头节点不是 ForwardingNode，则可以并发执行</li><li>如果 put 的线程操作的链表已经迁移完成，即头结点是 ForwardingNode，则可以协助扩容</li></ul></li><li>与 1.7 相比是懒惰初始化<br /></li><li>capacity 代表预估的元素个数，capacity / factory 来计算出初始数组大小，需要贴近 $2^n$ <br /></li><li>loadFactor 只在计算初始数组大小时被使用，之后扩容固定为 3/4<br /></li><li>超过树化阈值时的扩容问题，如果容量已经是 64，直接树化，否则在原来容量基础上做 3 轮扩容<br /></li></ul><p><a name="d29bff9c"></a></p><h3 id="19、ThreadLocal"><a href="#19、ThreadLocal" class="headerlink" title="19、ThreadLocal"></a>19、ThreadLocal</h3><p><strong>要求</strong></p><ul><li>掌握 ThreadLocal 的作用与原理</li><li>掌握 ThreadLocal 的内存释放时机</li></ul><p><strong>作用</strong></p><ul><li>ThreadLocal 可以实现【资源对象】的线程隔离，让每个线程各用各的【资源对象】，避免争用引发的线程安全问题</li><li>ThreadLocal 同时实现了线程内的资源共享</li></ul><p><strong>原理</strong><br />每个线程内有一个 ThreadLocalMap 类型的成员变量，用来存储资源对象</p><ul><li>调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中</li><li>调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值</li><li>调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值</li></ul><p>ThreadLocalMap 的一些特点</p><ul><li>key 的 hash 值统一分配</li><li>初始容量 16，扩容因子 2/3，扩容容量翻倍</li><li>key 索引冲突后用开放寻址法解决冲突</li></ul><p><strong>弱引用 key</strong><br />ThreadLocalMap 中的 key 被设计为弱引用，原因如下</p><ul><li>Thread 可能需要长时间运行（如线程池中的线程），如果 key 不再使用，需要在内存不足（GC）时释放其占用的内存</li></ul><p><strong>内存释放时机</strong></p><ul><li>被动 GC 释放 key<ul><li>仅是让 key 的内存释放，关联 value 的内存并不会释放</li></ul></li><li>懒惰被动释放 value<ul><li>get key 时，发现是 null key，则释放其 value 内存</li><li>set key 时，会使用启发式扫描，清除临近的 null key 的 value 内存，启发次数与元素个数，是否发现 null key 有关</li></ul></li><li>主动 remove 释放 key，value<ul><li>会同时释放 key，value 的内存，也会清除临近的 null key 的 value 内存</li><li>推荐使用它，因为一般使用 ThreadLocal 时都把它作为静态变量（即强引用），因此无法被动依靠 GC 回收<br><a name="de3b1c0f"></a></li></ul></li></ul><h3 id="20、RabbitMQ高级特性"><a href="#20、RabbitMQ高级特性" class="headerlink" title="20、RabbitMQ高级特性"></a>20、RabbitMQ高级特性</h3><p><a href="https://blog.xueqimiao.com/rabbitmq/">https://blog.xueqimiao.com/rabbitmq/</a><br><a name="51a52cd1"></a></p><h3 id="21、数据库和Redis缓存一致性"><a href="#21、数据库和Redis缓存一致性" class="headerlink" title="21、数据库和Redis缓存一致性"></a>21、数据库和Redis缓存一致性</h3><p><a href="https://blog.xueqimiao.com/redis/">https://blog.xueqimiao.com/redis/</a><br /> </p>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MongDB入门</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%20NoSQL%20-%20MongoDB%20_%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%20CRUD%20%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/%E4%BA%86%E8%A7%A3%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%20NoSQL%20-%20MongoDB%20_%20%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%20CRUD%20%E6%93%8D%E4%BD%9C/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-29T06:18:39.526Z</updated>
    
    <content type="html"><![CDATA[<p><a name="yI3Cm"></a></p><h1 id="了解非关系型数据库-NoSQL-MongoDB-安装使用以及-CRUD-操作了解非关系型数据库-NoSQL-MongoDB-安装使用以及-CRUD-操作"><a href="#了解非关系型数据库-NoSQL-MongoDB-安装使用以及-CRUD-操作了解非关系型数据库-NoSQL-MongoDB-安装使用以及-CRUD-操作" class="headerlink" title="了解非关系型数据库 NoSQL - MongoDB | 安装使用以及 CRUD 操作了解非关系型数据库 NoSQL - MongoDB | 安装使用以及 CRUD 操作"></a>了解非关系型数据库 NoSQL - MongoDB | 安装使用以及 CRUD 操作了解非关系型数据库 NoSQL - MongoDB | 安装使用以及 CRUD 操作</h1><blockquote><p>配套资料: <a href="https://pan.baidu.com/s/18au42FIhSNrXY9p7MbmNbg">https://pan.baidu.com/s/18au42FIhSNrXY9p7MbmNbg</a> 提取码: 29ad<br>感谢 B 站用户 <a href="https://space.bilibili.com/55263887">冷鸟丨会飞</a>分享</p></blockquote><p><strong>课程目标</strong><br />MongoDB的副本集: 操作, 主要概念, 故障转移, 选举规则 MongoDB的分片集群：概念, 优点, 操作, 分片策略, 故障转移 MongoDB的安全认证</p><ul><li><p>理解 MongoDB 的业务场景, 熟悉 MongoDB 的简介, 特点和体系结构, 数据类型等.</p></li><li><p>能够在 Windows 和 Linux 下安装和启动 MongoDB, 图形化管理界面 Compass 的安装使用</p></li><li><p>掌握 MongoDB 基本常用命令实现数据的 CRUD</p></li><li><p>掌握 MongoDB 的索引类型, 索引管理, 执行计划<br><a name="rATNi"></a></p><h2 id="1-MongoDB-相关概念"><a href="#1-MongoDB-相关概念" class="headerlink" title="1. MongoDB 相关概念"></a>1. MongoDB 相关概念</h2><p><a name="lF4H2"></a></p><h3 id="1-1-业务场景"><a href="#1-1-业务场景" class="headerlink" title="1.1 业务场景"></a>1.1 业务场景</h3><p>传统的关系型数据库 (比如 MySQL), 在数据操作的”三高”需求以及对应的 Web 2.0 网站需求面前, 会有”力不从心”的感觉<br />所谓的三高需求:<br /><strong>高并发, 高性能, 高可用</strong>, 简称三高</p></li><li><p>High Performance: 对数据库的高并发读写的要求</p></li><li><p>High Storage: 对海量数据的高效率存储和访问的需求</p></li><li><p>High Scalability &amp;&amp; High Available: 对数据的高扩展性和高可用性的需求</p></li></ul><p><strong>而 MongoDB 可以应对三高需求</strong><br />具体的应用场景:</p><ul><li>社交场景, 使用 MongoDB 存储存储用户信息, 以及用户发表的朋友圈信息, 通过地理位置索引实现附近的人, 地点等功能.</li><li>游戏场景, 使用 MongoDB 存储游戏用户信息, 用户的装备, 积分等直接以内嵌文档的形式存储, 方便查询, 高效率存储和访问.</li><li>物流场景, 使用 MongoDB 存储订单信息, 订单状态在运送过程中会不断更新, 以 MongoDB 内嵌数组的形式来存储, 一次查询就能将订单所有的变更读取出来.</li><li>物联网场景, 使用 MongoDB 存储所有接入的智能设备信息, 以及设备汇报的日志信息, 并对这些信息进行多维度的分析.</li><li>视频直播, 使用 MongoDB 存储用户信息, 点赞互动信息等.</li></ul><p>这些应用场景中, 数据操作方面的共同点有:</p><ol><li>数据量大</li><li>写入操作频繁</li><li>价值较低的数据, 对<strong>事务性</strong>要求不高</li></ol><p>对于这样的数据, 更适合用 MongoDB 来实现数据存储<br />那么我们<strong>什么时候选择 MongoDB 呢?</strong><br />除了架构选型上, 除了上述三个特点之外, 还要考虑下面这些问题:</p><ul><li>应用不需要事务及复杂 JOIN 支持</li><li>新应用, 需求会变, 数据模型无法确定, 想快速迭代开发</li><li>应用需要 2000 - 3000 以上的读写QPS（更高也可以）</li><li>应用需要 TB 甚至 PB 级别数据存储</li><li>应用发展迅速, 需要能快速水平扩展</li><li>应用要求存储的数据不丢失</li><li>应用需要 99.999% 高可用</li><li>应用需要大量的地理位置查询, 文本查询</li></ul><p>如果上述有1个符合, 可以考虑 MongoDB, 2个及以上的符合, 选择 MongoDB 绝不会后悔.<br />如果用MySQL呢?<br />相对MySQL, 可以以更低的成本解决问题（包括学习, 开发, 运维等成本）<br><a name="hLlAj"></a></p><h3 id="1-2-MongoDB-简介"><a href="#1-2-MongoDB-简介" class="headerlink" title="1.2 MongoDB 简介"></a>1.2 MongoDB 简介</h3><p>MongoDB是一个开源, 高性能, 无模式的文档型数据库, 当初的设计就是用于简化开发和方便扩展, 是NoSQL数据库产品中的一种.是最 像关系型数据库（MySQL）的非关系型数据库. 它支持的数据结构非常松散, 是一种类似于 JSON 的 格式叫BSON, 所以它既可以存储比较复杂的数据类型, 又相当的灵活. MongoDB中的记录是一个文档, 它是一个由字段和值对（ﬁeld:value）组成的数据结构.MongoDB文档类似于JSON对象, 即一个文档认 为就是一个对象.字段的数据类型是字符型, 它的值除了使用基本的一些类型外, 还可以包括其他文档, 普通数组和文档数组.<br /><strong>“最像关系型数据库的 NoSQL 数据库”</strong>. MongoDB 中的记录是一个文档, 是一个 key-value pair. 字段的数据类型是字符型, 值除了使用基本的一些类型以外, 还包括其它文档, 普通数组以及文档数组<br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/maxresdefault.jpg#crop=0&crop=0&crop=1&crop=1&from=url&id=nzOgn&margin=%5Bobject%20Object%5D&originHeight=720&originWidth=1280&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200505220556737.png#crop=0&crop=0&crop=1&crop=1&from=url&id=X15e7&margin=%5Bobject%20Object%5D&originHeight=259&originWidth=675&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />MongoDB 数据模型是面向文档的, 所谓文档就是一种类似于 JSON 的结构, 简单理解 MongoDB 这个数据库中存在的是各种各样的 JSON（BSON）</p><ul><li>数据库 (database)<ul><li>数据库是一个仓库, 存储集合 (collection)</li></ul></li><li>集合 (collection)<ul><li>类似于数组, 在集合中存放文档</li></ul></li><li>文档 (document)<ul><li>文档型数据库的最小单位, 通常情况, 我们存储和操作的内容都是文档</li></ul></li></ul><p>在 MongoDB 中, 数据库和集合都不需要手动创建, 当我们创建文档时, 如果文档所在的集合或者数据库不存在, <strong>则会自动创建数据库或者集合</strong><br><a name="OtPuC"></a></p><h3 id="数据库-databases-管理语法"><a href="#数据库-databases-管理语法" class="headerlink" title="数据库 (databases) 管理语法"></a>数据库 (databases) 管理语法</h3><table><thead><tr><th><strong>操作</strong></th><th><strong>语法</strong></th></tr></thead><tbody><tr><td>查看所有数据库</td><td>show dbs; 或 show databases;</td></tr><tr><td>查看当前数据库</td><td>db;</td></tr><tr><td>切换到某数据库 (<strong>若数据库不存在则创建数据库</strong>)</td><td>use <db_name>;</td></tr><tr><td>删除当前数据库</td><td>db.dropDatabase();</td></tr></tbody></table><p><a name="Igepb"></a></p><h3 id="集合-collection-管理语法"><a href="#集合-collection-管理语法" class="headerlink" title="集合 (collection) 管理语法"></a>集合 (collection) 管理语法</h3><table><thead><tr><th><strong>操作</strong></th><th><strong>语法</strong></th></tr></thead><tbody><tr><td>查看所有集合</td><td>show collections;</td></tr><tr><td>创建集合</td><td>db.createCollection(“<collection_name>“);</td></tr><tr><td>删除集合</td><td>db.<collection_name>.drop()</td></tr></tbody></table><p><a name="eUfkU"></a></p><h3 id="1-3-数据模型"><a href="#1-3-数据模型" class="headerlink" title="1.3. 数据模型"></a>1.3. 数据模型</h3><p><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200505220650827.png#crop=0&crop=0&crop=1&crop=1&from=url&id=nqgCf&margin=%5Bobject%20Object%5D&originHeight=490&originWidth=667&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="tRJsS"></a></p><h3 id="1-4-MongoDB-的特点"><a href="#1-4-MongoDB-的特点" class="headerlink" title="1.4 MongoDB 的特点"></a>1.4 MongoDB 的特点</h3><p><a name="B1oBg"></a></p><h4 id="1-4-1-高性能"><a href="#1-4-1-高性能" class="headerlink" title="1.4.1 高性能"></a>1.4.1 高性能</h4><p>MongoDB 提供高性能的数据持久化</p><ul><li><p>嵌入式数据模型的支持减少了数据库系统上的 I/O 活动</p></li><li><p>索引支持更快的查询, 并且可以包含来自嵌入式文档和数组的键 (文本索引解决搜索的需求, TTL 索引解决历史数据自动过期的需求, 地理位置索引可以用于构件各种 O2O 应用)</p></li><li><p>mmapv1, wiredtiger, mongorocks (rocksdb) in-memory 等多引擎支持满足各种场景需求</p></li><li><p>Gridfs 解决文件存储需求<br><a name="E7nas"></a></p><h4 id="1-4-2-高可用"><a href="#1-4-2-高可用" class="headerlink" title="1.4.2 高可用"></a>1.4.2 高可用</h4><p>MongoDB 的复制工具称作<strong>副本集</strong> (replica set) 可以提供自动故障转移和数据冗余<br><a name="HlXYi"></a></p><h4 id="1-4-3-高扩展"><a href="#1-4-3-高扩展" class="headerlink" title="1.4.3 高扩展"></a>1.4.3 高扩展</h4><p>水平扩展是其核心功能一部分<br />分片将数据分布在一组集群的机器上 (海量数据存储, 服务能力水平扩展)<br />MongoDB 支持基于<strong>片键</strong>创建数据区域, 在一个平衡的集群当中, MongoDB 将一个区域所覆盖的读写<strong>只定向</strong>到该区域的那些片<br><a name="SUKhJ"></a></p><h4 id="1-4-4-其他"><a href="#1-4-4-其他" class="headerlink" title="1.4.4 其他"></a>1.4.4 其他</h4><p>MongoDB支持丰富的查询语言, 支持读和写操作(CRUD), 比如数据聚合, 文本搜索和地理空间查询等. 无模式（动态模式）, 灵活的文档模型<br><a name="KTcAB"></a></p><h2 id="2-基本常用命令"><a href="#2-基本常用命令" class="headerlink" title="2. 基本常用命令"></a>2. 基本常用命令</h2><p><a name="q8eO1"></a></p><h3 id="2-1-数据库操作"><a href="#2-1-数据库操作" class="headerlink" title="2.1 数据库操作"></a>2.1 数据库操作</h3><p>默认保留的数据库</p></li><li><p><strong>admin</strong>: 从权限角度考虑, 这是 root 数据库, 如果将一个用户添加到这个数据库, 这个用户自动继承所有数据库的权限, 一些特定的服务器端命令也只能从这个数据库运行, 比如列出所有的数据库或者关闭服务器</p></li><li><p><strong>local</strong>: 数据永远不会被复制, 可以用来存储限于本地的单台服务器的集合 (部署集群, 分片等)</p></li><li><p><strong>config</strong>: Mongo 用于分片设置时, config 数据库在内部使用, 用来保存分片的相关信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ show dbs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ use articledb</span><br><span class="line"></span><br><span class="line">$ show dbs</span><br></pre></td></tr></table></figure><p>当使用 use articledb 的时候. articledb 其实存放在内存之中, 当 articledb 中存在一个 collection 之后, mongo 才会将这个数据库持久化到硬盘之中.<br><a name="Ztyaq"></a></p><h3 id="2-2-文档基本-CRUD"><a href="#2-2-文档基本-CRUD" class="headerlink" title="2.2 文档基本 CRUD"></a>2.2 文档基本 CRUD</h3><p>官方文档: <a href="https://docs.mongodb.com/manual/crud/">https://docs.mongodb.com/manual/crud/</a><br><a name="XQ1k3"></a></p><h4 id="2-2-1-创建-Create"><a href="#2-2-1-创建-Create" class="headerlink" title="2.2.1 创建 Create"></a>2.2.1 创建 Create</h4><p>Create or insert operations add new <a href="https://docs.mongodb.com/manual/core/document/#bson-document-format">documents</a> to a <a href="https://docs.mongodb.com/manual/core/databases-and-collections/#collections">collection</a>. If the collection does <strong>not</strong> currently exist, insert operations will create the collection automatically.</p></li><li><p>使用 <strong>db.<collection_name>.insertOne()</strong> 向集合中添加_一个文档_, 参数一个 json 格式的文档</p></li><li><p>使用 <strong>db.<collection_name>.insertMany()</strong> 向集合中添加_多个文档_, 参数为 json 文档数组</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.insert(&#123;</span><br><span class="line">  &lt;document or array of documents&gt;,</span><br><span class="line">  writeConcern: &lt;document&gt;,</span><br><span class="line">  ordered: &lt;boolean&gt;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 向集合中添加一个文档</span><br><span class="line">db.collection.insertOne(</span><br><span class="line">   &#123; item: &quot;canvas&quot;, qty: 100, tags: [&quot;cotton&quot;], size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125; &#125;</span><br><span class="line">)</span><br><span class="line">// 向集合中添加多个文档</span><br><span class="line">db.collection.insertMany([</span><br><span class="line">   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125; &#125;,</span><br><span class="line">   &#123; item: &quot;mat&quot;, qty: 85, tags: [&quot;gray&quot;], size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125; &#125;,</span><br><span class="line">   &#123; item: &quot;mousepad&quot;, qty: 25, tags: [&quot;gel&quot;, &quot;blue&quot;], size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>注：当我们向 collection 中插入 document 文档时, 如果没有给文档指定 _id 属性, 那么数据库会为文档自动添加 _id field, 并且值类型是 ObjectId(blablabla), 就是文档的唯一标识, 类似于 relational database 里的 primary key</p><ul><li>mongo 中的数字, 默认情况下是 double 类型, 如果要存整型, 必须使用函数 NumberInt(整型数字), 否则取出来就有问题了</li><li>插入当前日期可以使用 new Date()</li></ul><p>如果某条数据插入失败, 将会终止插入, 但已经插入成功的数据<strong>不会回滚掉</strong>. 因为批量插入由于数据较多容易出现失败, 因此, 可以使用 try catch 进行异常捕捉处理, 测试的时候可以不处理.如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  db.comment.insertMany([</span><br><span class="line">    &#123;&quot;_id&quot;:&quot;1&quot;,&quot;articleid&quot;:&quot;100001&quot;,&quot;content&quot;:&quot;我们不应该把清晨浪费在手机上, 健康很重要, 一杯温水幸福你我 他.&quot;,&quot;userid&quot;:&quot;1002&quot;,&quot;nickname&quot;:&quot;相忘于江湖&quot;,&quot;createdatetime&quot;:new Date(&quot;2019-0805T22:08:15.522Z&quot;),&quot;likenum&quot;:NumberInt(1000),&quot;state&quot;:&quot;1&quot;&#125;,</span><br><span class="line">    &#123;&quot;_id&quot;:&quot;2&quot;,&quot;articleid&quot;:&quot;100001&quot;,&quot;content&quot;:&quot;我夏天空腹喝凉开水, 冬天喝温开水&quot;,&quot;userid&quot;:&quot;1005&quot;,&quot;nickname&quot;:&quot;伊人憔 悴&quot;,&quot;createdatetime&quot;:new Date(&quot;2019-08-05T23:58:51.485Z&quot;),&quot;likenum&quot;:NumberInt(888),&quot;state&quot;:&quot;1&quot;&#125;,</span><br><span class="line">    &#123;&quot;_id&quot;:&quot;3&quot;,&quot;articleid&quot;:&quot;100001&quot;,&quot;content&quot;:&quot;我一直喝凉开水, 冬天夏天都喝.&quot;,&quot;userid&quot;:&quot;1004&quot;,&quot;nickname&quot;:&quot;杰克船 长&quot;,&quot;createdatetime&quot;:new Date(&quot;2019-08-06T01:05:06.321Z&quot;),&quot;likenum&quot;:NumberInt(666),&quot;state&quot;:&quot;1&quot;&#125;,</span><br><span class="line">    &#123;&quot;_id&quot;:&quot;4&quot;,&quot;articleid&quot;:&quot;100001&quot;,&quot;content&quot;:&quot;专家说不能空腹吃饭, 影响健康.&quot;,&quot;userid&quot;:&quot;1003&quot;,&quot;nickname&quot;:&quot;凯 撒&quot;,&quot;createdatetime&quot;:new Date(&quot;2019-08-06T08:18:35.288Z&quot;),&quot;likenum&quot;:NumberInt(2000),&quot;state&quot;:&quot;1&quot;&#125;,</span><br><span class="line">    &#123;&quot;_id&quot;:&quot;5&quot;,&quot;articleid&quot;:&quot;100001&quot;,&quot;content&quot;:&quot;研究表明, 刚烧开的水千万不能喝, 因为烫 嘴.&quot;,&quot;userid&quot;:&quot;1003&quot;,&quot;nickname&quot;:&quot;凯撒&quot;,&quot;createdatetime&quot;:new Date(&quot;2019-0806T11:01:02.521Z&quot;),&quot;likenum&quot;:NumberInt(3000),&quot;state&quot;:&quot;1&quot;&#125;</span><br><span class="line"></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  print (e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 db.<collection_name>.find() 方法对集合进行查询, 接受一个 json 格式的查询条件. 返回的是一个<strong>数组</strong></li><li>db.<collection_name>.findOne() 查询集合中符合条件的第一个文档, 返回的是一个<strong>对象</strong></li></ul><p><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/crud-annotated-mongodb-find.bakedsvg.png#crop=0&crop=0&crop=1&crop=1&from=url&id=goZqx&margin=%5Bobject%20Object%5D&originHeight=120&originWidth=720&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />可以使用 $in 操作符表示_范围查询_</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.inventory.find( &#123; status: &#123; $in: [ &quot;A&quot;, &quot;D&quot; ] &#125; &#125; )</span><br></pre></td></tr></table></figure><p>多个查询条件用逗号分隔, 表示 AND 的关系</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.inventory.find( &#123; status: &quot;A&quot;, qty: &#123; $lt: 30 &#125; &#125; )</span><br></pre></td></tr></table></figure><p>等价于下面 sql 语句<br />SELECT * FROM inventory WHERE status = “A” AND qty &lt; 30 <br />使用 $or 操作符表示后边数组中的条件是OR的关系</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.inventory.find( &#123; $or: [ &#123; status: &quot;A&quot; &#125;, &#123; qty: &#123; $lt: 30 &#125; &#125; ] &#125; )</span><br></pre></td></tr></table></figure><p>等价于下面 sql 语句<br />SELECT * FROM inventory WHERE status = “A” OR qty &lt; 30 <br />联合使用 AND 和 OR 的查询语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.inventory.find( &#123;</span><br><span class="line">     status: &quot;A&quot;,</span><br><span class="line">     $or: [ &#123; qty: &#123; $lt: 30 &#125; &#125;, &#123; item: /^p/ &#125; ]</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure><p>在 terminal 中查看结果可能不是很方便, 所以我们可以用 pretty() 来帮助阅读</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.inventory.find().pretty()</span><br></pre></td></tr></table></figure><p>匹配内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;</span><br><span class="line">  comments: &#123;</span><br><span class="line">    $elemMatch: &#123;</span><br><span class="line">      user: &#x27;Harry Potter&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).pretty()</span><br><span class="line"></span><br><span class="line">// 正则表达式</span><br><span class="line">db.&lt;collection_name&gt;.find(&#123; content : /once/ &#125;)</span><br></pre></td></tr></table></figure><p>创建索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.posts.createIndex(&#123;</span><br><span class="line">  &#123; title : &#x27;text&#x27; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 文本搜索</span><br><span class="line">// will return document with title &quot;Post One&quot;</span><br><span class="line">// if there is no more posts created</span><br><span class="line">db.posts.find(&#123;</span><br><span class="line">  $text : &#123;</span><br><span class="line">    $search : &quot;\&quot;Post O\&quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).pretty()</span><br></pre></td></tr></table></figure><p><a name="iHFvx"></a></p><h4 id="2-2-3-更新-Update"><a href="#2-2-3-更新-Update" class="headerlink" title="2.2.3 更新 Update"></a>2.2.3 更新 Update</h4><ul><li>使用<code>db.&lt;collection_name&gt;.updateOne(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)</code>方法修改一个匹配 <code>&lt;filter&gt;</code> 条件的文档</li><li>使用 <code>db.&lt;collection_name&gt;.updateMany(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;) </code>方法修改所有匹配 <code>&lt;filter&gt;</code> 条件的文档</li><li>使用<code> db.&lt;collection_name&gt;.replaceOne(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)</code> 方法<strong>替换</strong>一个匹配 <code>&lt;filter&gt;</code> 条件的文档</li><li><code>db.&lt;collection_name&gt;.update</code>(查询对象, 新对象) 默认情况下会使用新对象替换旧对象</li></ul><p>其中 <code>&lt;filter&gt;</code> 参数与查询方法中的条件参数用法一致.<br />如果需要修改指定的属性, 而不是替换需要用“修改操作符”来进行修改</p><ul><li><code>$set</code> 修改文档中的制定属性</li></ul><p>其中最常用的修改操作符即为$set和$unset,分别表示<strong>赋值</strong>和<strong>取消赋值</strong>.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.inventory.updateOne(</span><br><span class="line">    &#123; item: &quot;paper&quot; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $set: &#123; &quot;size.uom&quot;: &quot;cm&quot;, status: &quot;P&quot; &#125;,</span><br><span class="line">        $currentDate: &#123; lastModified: true &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.inventory.updateMany(</span><br><span class="line">    &#123; qty: &#123; $lt: 50 &#125; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $set: &#123; &quot;size.uom&quot;: &quot;in&quot;, status: &quot;P&quot; &#125;,</span><br><span class="line">        $currentDate: &#123; lastModified: true &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>uses the <code>[$set](https://docs.mongodb.com/manual/reference/operator/update/set/#up._S_set)</code> operator to update the value of the size.uom field to “cm” and the value of the status field to “P”,</li><li>uses the<code> [$currentDate](https://docs.mongodb.com/manual/reference/operator/update/currentDate/#up._S_currentDate)</code> operator to update the value of the lastModified field to the current date. If lastModified field does not exist, <code>[$currentDate](https://docs.mongodb.com/manual/reference/operator/update/currentDate/#up._S_currentDate) </code>will create the field. See <code>[$currentDate](https://docs.mongodb.com/manual/reference/operator/update/currentDate/#up._S_currentDate)</code> for details.</li></ul><p><code>db.&lt;collection_name&gt;.replaceOne() </code>方法替换除<code> _id</code> 属性外的<strong>所有属性</strong>, 其<code>&lt;update&gt;</code>参数应为一个<strong>全新的文档</strong>.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.inventory.replaceOne(</span><br><span class="line">    &#123; item: &quot;paper&quot; &#125;,</span><br><span class="line">    &#123; item: &quot;paper&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 60 &#125;, &#123; warehouse: &quot;B&quot;, qty: 40 &#125; ] &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>批量修改</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 默认会修改第一条</span><br><span class="line">db.document.update(&#123; userid: &quot;30&quot;, &#123; $set &#123;username: &quot;guest&quot;&#125; &#125; &#125;)</span><br><span class="line"></span><br><span class="line">// 修改所有符合条件的数据</span><br><span class="line">db.document.update( &#123; userid: &quot;30&quot;, &#123; $set &#123;username: &quot;guest&quot;&#125; &#125; &#125;, &#123;multi: true&#125; )</span><br></pre></td></tr></table></figure><p><strong>列值增长的修改</strong><br />如果我们想实现对某列值在原有值的基础上进行增加或减少, 可以使用 $inc 运算符来实现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.document.update(&#123; _id: &quot;3&quot;, &#123;$inc: &#123;likeNum: NumberInt(1)&#125;&#125; &#125;)</span><br></pre></td></tr></table></figure><p><a name="YGcwL"></a></p><h5 id="修改操作符"><a href="#修改操作符" class="headerlink" title="修改操作符"></a>修改操作符</h5><table><thead><tr><th><strong>Name</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/currentDate/#up._S_currentDate">$currentDate</a></td><td>Sets the value of a field to current date, either as a Date or a Timestamp.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/inc/#up._S_inc">$inc</a></td><td>Increments the value of the field by the specified amount.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/min/#up._S_min">$min</a></td><td>Only updates the field if the specified value is less than the existing field value.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/max/#up._S_max">$max</a></td><td>Only updates the field if the specified value is greater than the existing field value.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/mul/#up._S_mul">$mul</a></td><td>Multiplies the value of the field by the specified amount.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/rename/#up._S_rename">$rename</a></td><td>Renames a field.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/set/#up._S_set">$set</a></td><td>Sets the value of a field in a document.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/setOnInsert/#up._S_setOnInsert">$setOnInsert</a></td><td>Sets the value of a field if an update results in an insert of a document. Has no effect on update operations that modify existing documents.</td></tr><tr><td><a href="https://docs.mongodb.com/manual/reference/operator/update/unset/#up._S_unset">$unset</a></td><td>Removes the specified field from a document.</td></tr></tbody></table><p><a name="Ft2F3"></a></p><h4 id="2-2-4-删除-Delete"><a href="#2-2-4-删除-Delete" class="headerlink" title="2.2.4 删除 Delete"></a>2.2.4 删除 Delete</h4><ul><li>使用 <code>db.collection.deleteMany()</code> 方法删除所有匹配的文档.</li><li>使用 <code>db.collection.deleteOne()</code> 方法删除单个匹配的文档.</li><li><code>db.collection.drop()</code></li><li><code>db.dropDatabase()</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.inventory.deleteMany( &#123; qty : &#123; $lt : 50 &#125; &#125; )</span><br></pre></td></tr></table></figure>Delete operations <strong>do not drop indexes</strong>, even if deleting all documents from a collection.<br />一般数据库中的数据都不会真正意义上的删除, 会添加一个字段, 用来表示这个数据是否被删除<br><a name="vksIg"></a><h3 id="2-3-文档排序和投影-sort-amp-projection"><a href="#2-3-文档排序和投影-sort-amp-projection" class="headerlink" title="2.3 文档排序和投影 (sort &amp; projection)"></a>2.3 文档排序和投影 (sort &amp; projection)</h3><a name="DOviB"></a><h4 id="2-3-1-排序-Sort"><a href="#2-3-1-排序-Sort" class="headerlink" title="2.3.1 排序 Sort"></a>2.3.1 排序 Sort</h4>在查询文档内容的时候, 默认是按照<code>_id</code>进行排序<br />我们可以用<code> $sort</code> 更改文档排序规则<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; $sort: &#123; &lt;field1&gt;: &lt;sort order&gt;, &lt;field2&gt;: &lt;sort order&gt; ... &#125; &#125;</span><br></pre></td></tr></table></figure>For the field or fields to sort by, set the sort order to 1 or -1 to specify an <em>ascending</em> or <em>descending</em> sort respectively, as in the following example:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.aggregate(</span><br><span class="line">   [</span><br><span class="line">     &#123; $sort : &#123; age : -1, posts: 1 &#125; &#125;</span><br><span class="line">     // ascending on posts and descending on age</span><br><span class="line">   ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><a name="VqzXG"></a><h5 id="sort-Operator-and-Memory"><a href="#sort-Operator-and-Memory" class="headerlink" title="$sort Operator and Memory"></a><code>$sort </code>Operator and Memory</h5><a name="i92lX"></a><h5 id="sort-limit-Memory-Optimization"><a href="#sort-limit-Memory-Optimization" class="headerlink" title="$sort + $limit Memory Optimization"></a><code>$sort</code> +<code> $limit</code> Memory Optimization</h5>When a<code> [$sort](https://docs.mongodb.com/manual/reference/operator/aggregation/sort/index.html#pipe._S_sort)</code> precedes a <code>[$limit](https://docs.mongodb.com/manual/reference/operator/aggregation/limit/#pipe._S_limit)</code> and there are no intervening stages that modify the number of documents, the optimizer can coalesce the <code>[$limit](https://docs.mongodb.com/manual/reference/operator/aggregation/limit/#pipe._S_limit)</code> into the <code>[$sort](https://docs.mongodb.com/manual/reference/operator/aggregation/sort/index.html#pipe._S_sort)</code>. This allows the<code>[$sort](https://docs.mongodb.com/manual/reference/operator/aggregation/sort/index.html#pipe._S_sort)</code>operation to <strong>only maintain the top n results as it progresses</strong>, where n is the specified limit, and ensures that MongoDB only needs to store n items in memory. This optimization still applies when <code>allowDiskUse</code> is <code>true </code>and the <code>n</code> items exceed the <code>[aggregation memory limit](https://docs.mongodb.com/manual/core/aggregation-pipeline-limits/#agg-memory-restrictions)</code>.<br />Optimizations are subject to change between releases.</li></ul><p>有点类似于用 heap 做 topK 这种问题, 只维护 k 个大小的 heap, 会加速 process<br />举个栗子:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.posts.find().sort(&#123; title : -1 &#125;).limit(2).pretty()</span><br></pre></td></tr></table></figure><p><a name="u3wZH"></a></p><h4 id="2-3-2-投影-Projection"><a href="#2-3-2-投影-Projection" class="headerlink" title="2.3.2 投影 Projection"></a>2.3.2 投影 Projection</h4><p>有些情况, 我们对文档进行查询并不是需要所有的字段, 比如只需要 id 或者 用户名, 我们可以对文档进行“投影”</p><ul><li><p><code>1 - display</code></p></li><li><p><code>0 - dont display</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.users.find( &#123;&#125;, &#123;username: 1&#125; )</span><br><span class="line"></span><br><span class="line">&gt; db.users.find( &#123;&#125;, &#123;age: 1, _id: 0&#125; )</span><br></pre></td></tr></table></figure><p><a name="yi9rh"></a></p><h3 id="2-4-forEach"><a href="#2-4-forEach" class="headerlink" title="2.4 forEach()"></a>2.4 forEach()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.posts.find().forEach(fucntion(doc) &#123; print(&#x27;Blog Post: &#x27; + doc.title) &#125;)</span><br></pre></td></tr></table></figure><p><a name="aBxjN"></a></p><h3 id="2-5-其他查询方式"><a href="#2-5-其他查询方式" class="headerlink" title="2.5 其他查询方式"></a>2.5 其他查询方式</h3><p><a name="OCWTJ"></a></p><h4 id="2-5-1-正则表达式"><a href="#2-5-1-正则表达式" class="headerlink" title="2.5.1 正则表达式"></a>2.5.1 正则表达式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ db.collection.find(&#123;field:/正则表达式/&#125;)</span><br><span class="line"></span><br><span class="line">$ db.collection.find(&#123;字段:/正则表达式/&#125;)</span><br></pre></td></tr></table></figure><p><a name="U0SC9"></a></p><h4 id="2-5-2-比较查询"><a href="#2-5-2-比较查询" class="headerlink" title="2.5.2 比较查询"></a>2.5.2 比较查询</h4><p><code>&lt;</code>,<code> &lt;=</code>,<code> &gt;</code>, <code>&gt;=</code> 这些操作符也是很常用的, 格式如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123; &quot;field&quot; : &#123; $gt: value &#125;&#125;) // 大于: field &gt; value</span><br><span class="line">db.collection.find(&#123; &quot;field&quot; : &#123; $lt: value &#125;&#125;) // 小于: field &lt; value</span><br><span class="line">db.collection.find(&#123; &quot;field&quot; : &#123; $gte: value &#125;&#125;) // 大于等于: field &gt;= value</span><br><span class="line">db.collection.find(&#123; &quot;field&quot; : &#123; $lte: value &#125;&#125;) // 小于等于: field &lt;= value</span><br><span class="line">db.collection.find(&#123; &quot;field&quot; : &#123; $ne: value &#125;&#125;) // 不等于: field != value</span><br></pre></td></tr></table></figure><p><a name="pqCml"></a></p><h4 id="2-5-3-包含查询"><a href="#2-5-3-包含查询" class="headerlink" title="2.5.3 包含查询"></a>2.5.3 包含查询</h4><p>包含使用 <code>$in </code>操作符. 示例：查询评论的集合中<code>userid</code>字段包含 <code>1003</code> 或 <code>1004</code>的文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&#123;$in:[&quot;1003&quot;,&quot;1004&quot;]&#125;&#125;)</span><br></pre></td></tr></table></figure><p>不包含使用 <code>$nin </code>操作符. 示例：查询评论集合中<code> userid</code> 字段不包含<code> 1003</code> 和 <code>1004</code> 的文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&#123;$nin:[&quot;1003&quot;,&quot;1004&quot;]&#125;&#125;)</span><br></pre></td></tr></table></figure><p><a name="yeh6S"></a></p><h2 id="2-6-常用命令小结"><a href="#2-6-常用命令小结" class="headerlink" title="2.6 常用命令小结"></a>2.6 常用命令小结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择切换数据库：use articledb</span><br><span class="line">插入数据：db.comment.insert(&#123;bson数据&#125;)</span><br><span class="line">查询所有数据：db.comment.find();</span><br><span class="line">条件查询数据：db.comment.find(&#123;条件&#125;)</span><br><span class="line">查询符合条件的第一条记录：db.comment.findOne(&#123;条件&#125;)</span><br><span class="line">查询符合条件的前几条记录：db.comment.find(&#123;条件&#125;).limit(条数)</span><br><span class="line">查询符合条件的跳过的记录：db.comment.find(&#123;条件&#125;).skip(条数)</span><br><span class="line"></span><br><span class="line">修改数据：db.comment.update(&#123;条件&#125;,&#123;修改后的数据&#125;)</span><br><span class="line">        或</span><br><span class="line">        db.comment.update(&#123;条件&#125;,&#123;$set:&#123;要修改部分的字段:数据&#125;)</span><br><span class="line"></span><br><span class="line">修改数据并自增某字段值：db.comment.update(&#123;条件&#125;,&#123;$inc:&#123;自增的字段:步进值&#125;&#125;)</span><br><span class="line"></span><br><span class="line">删除数据：db.comment.remove(&#123;条件&#125;)</span><br><span class="line">统计查询：db.comment.count(&#123;条件&#125;)</span><br><span class="line">模糊查询：db.comment.find(&#123;字段名:/正则表达式/&#125;)</span><br><span class="line">条件比较运算：db.comment.find(&#123;字段名:&#123;$gt:值&#125;&#125;)</span><br><span class="line">包含查询：db.comment.find(&#123;字段名:&#123;$in:[值1, 值2]&#125;&#125;)</span><br><span class="line">        或</span><br><span class="line">        db.comment.find(&#123;字段名:&#123;$nin:[值1, 值2]&#125;&#125;)</span><br><span class="line"></span><br><span class="line">条件连接查询：db.comment.find(&#123;$and:[&#123;条件1&#125;,&#123;条件2&#125;]&#125;)</span><br><span class="line">           或</span><br><span class="line">           db.comment.find(&#123;$or:[&#123;条件1&#125;,&#123;条件2&#125;]&#125;)</span><br></pre></td></tr></table></figure><p><a name="AcMkR"></a></p><h2 id="3-文档间的对应关系"><a href="#3-文档间的对应关系" class="headerlink" title="3. 文档间的对应关系"></a>3. 文档间的对应关系</h2></li><li><p>一对一 (One To One)</p></li><li><p>一对多 (One To Many)</p></li><li><p>多对多 (Many To Many)</p></li></ul><p>举个例子, 比如“用户-订单”这个一对多的关系中, 我们想查询某一个用户的所有或者某个订单, 我们可以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var user_id = db.users.findOne( &#123;username: &quot;username_here&quot;&#125; )._id</span><br><span class="line">db.orders.find( &#123;user_id: user_id&#125; )</span><br></pre></td></tr></table></figure><p><a name="iCsoV"></a></p><h2 id="4-MongoDB-的索引"><a href="#4-MongoDB-的索引" class="headerlink" title="4. MongoDB 的索引"></a>4. MongoDB 的索引</h2><p><a name="T2c8E"></a></p><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>索引支持在 MongoDB 中高效地执行查询.如果没有索引, MongoDB 必须执行全集合扫描, 即扫描集合中的每个文档, 以选择与查询语句 匹配的文档.这种扫描全集合的查询效率是非常低的, 特别在处理大量的数据时, 查询可以要花费几十秒甚至几分钟, 这对网站的性能是非常致命的.<br />如果查询存在适当的索引, MongoDB 可以使用该索引限制必须检查的文档数.<br />索引是特殊的数据结构, 它以易于遍历的形式存储集合数据集的一小部分.索引存储特定字段或一组字段的值, 按字段值排序.索引项的排 序支持有效的相等匹配和基于范围的查询操作.此外, MongoDB 还可以使用索引中的排序返回排序结果.<br />MongoDB 使用的是 B Tree, MySQL 使用的是 B+ Tree</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// create index</span><br><span class="line">db.&lt;collection_name&gt;.createIndex(&#123; userid : 1, username : -1 &#125;)</span><br><span class="line"></span><br><span class="line">// retrieve indexes</span><br><span class="line">db.&lt;collection_name&gt;.getIndexes()</span><br><span class="line"></span><br><span class="line">// remove indexes</span><br><span class="line">db.&lt;collection_name&gt;.dropIndex(index)</span><br><span class="line"></span><br><span class="line">// there are 2 ways to remove indexes:</span><br><span class="line">// 1. removed based on the index name</span><br><span class="line">// 2. removed based on the fields</span><br><span class="line"></span><br><span class="line">db.&lt;collection_name&gt;.dropIndex( &quot;userid_1_username_-1&quot; )</span><br><span class="line">db.&lt;collection_name&gt;.dropIndex(&#123; userid : 1, username : -1 &#125;)</span><br><span class="line"></span><br><span class="line">// remove all the indexes, will only remove non_id indexes</span><br><span class="line">db.&lt;collection_name&gt;.dropIndexes()</span><br></pre></td></tr></table></figure><p><a name="Jwq0u"></a></p><h3 id="4-2-索引的类型"><a href="#4-2-索引的类型" class="headerlink" title="4.2 索引的类型"></a>4.2 索引的类型</h3><p><a name="ZgaTb"></a></p><h4 id="4-2-1-单字段索引"><a href="#4-2-1-单字段索引" class="headerlink" title="4.2.1 单字段索引"></a>4.2.1 单字段索引</h4><p>MongoDB 支持在文档的单个字段上创建用户定义的<strong>升序/降序索引</strong>, 称为<strong>单字段索引</strong> Single Field Index<br />对于单个字段索引和排序操作, 索引键的排序顺序（即升序或降序）并不重要, 因为 MongoDB 可以在任何方向上遍历索引.<br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200505231043779.png#crop=0&crop=0&crop=1&crop=1&from=url&id=rJx3e&margin=%5Bobject%20Object%5D&originHeight=278&originWidth=790&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="JlXIg"></a></p><h4 id="4-2-2-复合索引"><a href="#4-2-2-复合索引" class="headerlink" title="4.2.2 复合索引"></a>4.2.2 复合索引</h4><p>MongoDB 还支持多个字段的用户定义索引, 即复合索引 Compound Index<br />复合索引中列出的字段顺序具有重要意义.例如, 如果复合索引由 <code>&#123; userid: 1, score: -1 &#125;</code> 组成, 则索引首先按 <code>userid</code> 正序排序, 然后 在每个<code> userid</code> 的值内, 再在按<code> score</code> 倒序排序.<br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200505231305941.png#crop=0&crop=0&crop=1&crop=1&from=url&id=qhiak&margin=%5Bobject%20Object%5D&originHeight=292&originWidth=758&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="jE4lD"></a></p><h4 id="4-2-3-其他索引"><a href="#4-2-3-其他索引" class="headerlink" title="4.2.3 其他索引"></a>4.2.3 其他索引</h4><ul><li><p>地理空间索引 Geospatial Index</p></li><li><p>文本索引 Text Indexes</p></li><li><p>哈希索引 Hashed Indexes<br><a name="QZTzd"></a></p><h5 id="地理空间索引（Geospatial-Index）"><a href="#地理空间索引（Geospatial-Index）" class="headerlink" title="地理空间索引（Geospatial Index）"></a>地理空间索引（Geospatial Index）</h5><p>为了支持对地理空间坐标数据的有效查询, MongoDB 提供了两种特殊的索引: 返回结果时使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引.<br><a name="dyq2v"></a></p><h5 id="文本索引（Text-Indexes）"><a href="#文本索引（Text-Indexes）" class="headerlink" title="文本索引（Text Indexes）"></a>文本索引（Text Indexes）</h5><p>MongoDB 提供了一种文本索引类型, 支持在集合中搜索字符串内容.这些文本索引不存储特定于语言的停止词（例如 “the”, “a”, “or”）, 而将集合中的词作为词干, 只存储根词.<br><a name="ZikKI"></a></p><h5 id="哈希索引（Hashed-Indexes）"><a href="#哈希索引（Hashed-Indexes）" class="headerlink" title="哈希索引（Hashed Indexes）"></a>哈希索引（Hashed Indexes）</h5><p>为了支持基于散列的分片, MongoDB 提供了散列索引类型, 它对字段值的散列进行索引.这些索引在其范围内的值分布更加随机, 但只支持相等匹配, 不支持基于范围的查询.<br><a name="yifBn"></a></p><h3 id="4-3-索引的管理操作"><a href="#4-3-索引的管理操作" class="headerlink" title="4.3 索引的管理操作"></a>4.3 索引的管理操作</h3><p><a name="WS8s5"></a></p><h4 id="4-3-1-索引的查看"><a href="#4-3-1-索引的查看" class="headerlink" title="4.3.1 索引的查看"></a>4.3.1 索引的查看</h4><p>语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.getIndexes()</span><br></pre></td></tr></table></figure><p>默认 <code>_id</code> 索引： MongoDB 在创建集合的过程中, 在 <code>_id </code>字段上创建一个唯一的索引, 默认名字为 _id , 该索引可防止客户端插入两个具有相同值的文 档, 不能在 <code>_id</code> 字段上删除此索引.<br />注意：该索引是<strong>唯一索引</strong>, 因此值不能重复, 即 <code>_id</code> 值不能重复的.<br />在分片集群中, 通常使用<code> _id</code> 作为<strong>片键</strong>.<br><a name="RL5Nz"></a></p><h4 id="4-3-2-索引的创建"><a href="#4-3-2-索引的创建" class="headerlink" title="4.3.2 索引的创建"></a>4.3.2 索引的创建</h4><p>语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.createIndex(keys, options)</span><br></pre></td></tr></table></figure><p>参数<br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200506203419523.png#crop=0&crop=0&crop=1&crop=1&from=url&id=fX9fF&margin=%5Bobject%20Object%5D&originHeight=218&originWidth=1023&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />options（更多选项）列表<br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200506203453430.png#crop=0&crop=0&crop=1&crop=1&from=url&id=ybQV4&margin=%5Bobject%20Object%5D&originHeight=624&originWidth=1020&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />注意在 3.0.0 版本前创建索引方法为 <code>db.collection.ensureIndex() </code>, 之后的版本使用了 <code>db.collection.createIndex() </code>方法, <code>ensureIndex() </code>还能用, 但只是 <code>createIndex()</code> 的别名.<br />举个🌰</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  db.comment.createIndex(&#123;userid:1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;createdCollectionAutomatically&quot; : false,</span><br><span class="line">  &quot;numIndexesBefore&quot; : 1,</span><br><span class="line">  &quot;numIndexesAfter&quot; : 2,</span><br><span class="line">  &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ db.comment.createIndex(&#123;userid:1,nickname:-1&#125;)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="VvZ42"></a></p><h4 id="4-3-3-索引的删除"><a href="#4-3-3-索引的删除" class="headerlink" title="4.3.3 索引的删除"></a>4.3.3 索引的删除</h4><p>语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除某一个索引</span><br><span class="line">$ db.collection.dropIndex(index)</span><br><span class="line"></span><br><span class="line"># 删除全部索引</span><br><span class="line">$ db.collection.dropIndexes()</span><br></pre></td></tr></table></figure><p>提示:<br /><code>_id</code> 的字段的索引是无法删除的, 只能删除非 <code>_id</code> 字段的索引<br />示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 删除 comment 集合中 userid 字段上的升序索引</span><br><span class="line">$ db.comment.dropIndex(&#123;userid:1&#125;)</span><br></pre></td></tr></table></figure><p><a name="URmYT"></a></p><h3 id="4-4-索引使用"><a href="#4-4-索引使用" class="headerlink" title="4.4 索引使用"></a>4.4 索引使用</h3><p><a name="a7pDh"></a></p><h4 id="4-4-1-执行计划"><a href="#4-4-1-执行计划" class="headerlink" title="4.4.1 执行计划"></a>4.4.1 执行计划</h4><p>分析查询性能 (Analyze Query Performance) 通常使用执行计划 (解释计划 - Explain Plan) 来查看查询的情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ db.&lt;collection_name&gt;.find( query, options ).explain(options)</span><br></pre></td></tr></table></figure><p>比如: 查看根据 <code>user_id</code> 查询数据的情况<br /><strong>未添加索引之前</strong><br /><code>&quot;stage&quot; : &quot;COLLSCAN&quot;</code>, 表示全集合扫描<br /><img src="https://raw.githubusercontent.com/Zhenye-Na/img-hosting-picgo/master/img/image-20200506205714154.png#crop=0&crop=0&crop=1&crop=1&from=url&id=vEHd4&margin=%5Bobject%20Object%5D&originHeight=715&originWidth=1021&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br /><strong>添加索引之后</strong><br /><code>&quot;stage&quot; : &quot;IXSCAN&quot;</code>, 基于索引的扫描<br><a name="yDoAg"></a></p><h4 id="4-4-2-涵盖的查询"><a href="#4-4-2-涵盖的查询" class="headerlink" title="4.4.2 涵盖的查询"></a>4.4.2 涵盖的查询</h4><p>当查询条件和查询的投影仅包含索引字段是, MongoDB 直接从索引返回结果, 而不扫描任何文档或将文档带入内存, 这些覆盖的查询十分有效<br /><a href="https://docs.mongodb.com/manual/core/query-optimization/#covered-query">https://docs.mongodb.com/manual/core/query-optimization/#covered-query</a><br><a name="Nlxz7"></a></p><h2 id="5-在-Nodejs-中使用-MongoDB-mongoose"><a href="#5-在-Nodejs-中使用-MongoDB-mongoose" class="headerlink" title="5. 在 Nodejs 中使用 MongoDB - mongoose"></a>5. 在 Nodejs 中使用 MongoDB - mongoose</h2><p>mongoose 是一个对象文档模型（ODM）库<br /><a href="https://mongoosejs.com/">https://mongoosejs.com/</a></p></li><li><p>可以为文档创建一个模式结构（Schema）</p></li><li><p>可以对模型中的对象/文档进行验证</p></li><li><p>数据可以通过类型转换转换为对象模型</p></li><li><p>可以使用中间件应用业务逻辑<br><a name="Lr3cj"></a></p><h3 id="5-1-mongoose-提供的新对象类型"><a href="#5-1-mongoose-提供的新对象类型" class="headerlink" title="5.1 mongoose 提供的新对象类型"></a>5.1 mongoose 提供的新对象类型</h3></li><li><p>Schema</p><ul><li>定义约束了数据库中的文档结构</li><li>个人感觉类似于 SQL 中建表时事先规定表结构</li></ul></li><li><p>Model</p><ul><li>集合中的所有文档的表示, 相当于 MongoDB 数据库中的 collection</li></ul></li><li><p>Document</p><ul><li>表示集合中的具体文档, 相当于集合中的一个具体的文档<br><a name="fewnr"></a><h3 id="5-2-简单使用-Mongoose"><a href="#5-2-简单使用-Mongoose" class="headerlink" title="5.2 简单使用 Mongoose"></a>5.2 简单使用 Mongoose</h3><a href="https://mongoosejs.com/docs/guide.html">https://mongoosejs.com/docs/guide.html</a><br />使用 mongoose 返回的是一个 <code>mogoose Query object</code>, mongoose 执行 query 语句后的结果会被传进 callback 函数 <code>callback(error, result)</code><blockquote><p>A mongoose query can be executed in one of two ways. First, if you pass in a callback function, Mongoose will execute the query asynchronously and pass the results to the callback.<br>A query also has a .then() function, and thus can be used as a promise.</p></blockquote></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const q = MyModel.updateMany(&#123;&#125;, &#123; isDeleted: true &#125;, function() &#123;</span><br><span class="line">  console.log(&quot;Update 1&quot;);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">q.then(() =&gt; console.log(&quot;Update 2&quot;));</span><br><span class="line">q.then(() =&gt; console.log(&quot;Update 3&quot;));</span><br></pre></td></tr></table></figure><p>上面这一段代码会执行三次 <code>updateMany()</code> 操作, 第一次是因为 callback, 之后的两次是因为<code> .then()</code> (因为 <code>.then() </code>也会调用 <code>updatemany())</code><br /><strong>连接数据库并且创建 Model 类</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">// test is the name of database, will be created automatically</span><br><span class="line">mongoose.connect(&#x27;mongodb://localhost:27017/test&#x27;, &#123;useNewUrlParser: true&#125;);</span><br><span class="line"></span><br><span class="line">const Cat = mongoose.model(&#x27;Cat&#x27;, &#123; name: String &#125;);</span><br><span class="line"></span><br><span class="line">const kitty = new Cat(&#123; name: &#x27;Zildjian&#x27; &#125;);</span><br><span class="line">kitty.save().then(() =&gt; console.log(&#x27;meow&#x27;));</span><br></pre></td></tr></table></figure><p><strong>监听 MongoDB 数据库的连接状态</strong><br />在 mongoose 对象中, 有一个属性叫做<code> connection</code>, 该对象就表示数据库连接.通过监视该对象的状态, 可以来监听数据库的连接和端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongoose.connection.once(&quot;open&quot;, function() &#123;</span><br><span class="line">  console.log(&quot;connection opened.&quot;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mongoose.connection.once(&quot;close&quot;, function() &#123;</span><br><span class="line">  console.log(&quot;connection closed.&quot;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="vTTKc"></a></p><h3 id="5-3-Mongoose-的-CRUD"><a href="#5-3-Mongoose-的-CRUD" class="headerlink" title="5.3 Mongoose 的 CRUD"></a>5.3 Mongoose 的 CRUD</h3><p>首先定义一个<code> Schema</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const mongoose = require(&#x27;mongoose&#x27;);</span><br><span class="line">const Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line">const blogSchema = new Schema(&#123;</span><br><span class="line">    title:  String, // String is shorthand for &#123;type: String&#125;</span><br><span class="line">    author: String,</span><br><span class="line">    body:   String,</span><br><span class="line">    comments: [&#123; body: String, date: Date &#125;],</span><br><span class="line">    date: &#123; type: Date, default: Date.now &#125;,</span><br><span class="line">    hidden: Boolean,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        votes: Number,</span><br><span class="line">        favs:  Number</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在 <code>blogSchema </code>基础上创建 <code>Model</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Blog = mongoose.model(&#x27;Blog&#x27;, blogSchema);</span><br><span class="line">// ready to go!</span><br><span class="line"></span><br><span class="line">module.exports = Blog;</span><br></pre></td></tr></table></figure><p>当调用上面这一行代码时, MongoDB 会做如下操作</p><ol><li>是否存在一个数据库叫做 <code>Blog </code>啊? 没的话那就创建一个</li><li>每次用到 Blog 库的时候都要注意内部数据要按照 <code>blogSchema </code>来规定</li></ol><p>向数据库中插入文档数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Blog.create(&#123;</span><br><span class="line">  title: &quot;title&quot;</span><br><span class="line">  ...</span><br><span class="line">&#125;, function (err)&#123;</span><br><span class="line">  if (!err) &#123;</span><br><span class="line">    console.log(&quot;successful&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简单的查询一下下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// named john and at least 18 yo</span><br><span class="line">MyModel.find(&#123; name: &#x27;john&#x27;, age: &#123; $gte: 18 &#125;&#125;);</span><br></pre></td></tr></table></figure><p>mongoose 支持的用法有:</p><ul><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.deleteMany">Model.deleteMany()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.deleteOne">Model.deleteOne()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.find">Model.find()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findById">Model.findById()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findByIdAndDelete">Model.findByIdAndDelete()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove">Model.findByIdAndRemove()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate">Model.findByIdAndUpdate()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findOne">Model.findOne()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findOneAndDelete">Model.findOneAndDelete()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findOneAndRemove">Model.findOneAndRemove()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findOneAndReplace">Model.findOneAndReplace()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.findOneAndUpdate">Model.findOneAndUpdate()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.replaceOne">Model.replaceOne()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.updateMany">Model.updateMany()</a></p></li><li><p><a href="https://mongoosejs.com/docs/api.html#model_Model.updateOne">Model.updateOne()</a><br><a name="AfKe2"></a></p><h2 id="6-使用-Mocha-编写测试-“Test-Driven-Development”"><a href="#6-使用-Mocha-编写测试-“Test-Driven-Development”" class="headerlink" title="6. 使用 Mocha 编写测试 “Test Driven Development”"></a>6. 使用 Mocha 编写测试 “Test Driven Development”</h2><p>Mocha 是一个 js 测试的包, 编写测试有两个关键字 <code>describe </code>和 <code>it</code></p></li><li><p><code>describe </code>是一个”统领块”, 所有的 test functions 都会在它”名下”</p></li><li><p><code>it </code>表示每一个 test function</p></li></ul><p><code>create_test.js</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const assert = require(&#x27;assert&#x27;)</span><br><span class="line">// assume we have a User model defined in src/user.js</span><br><span class="line">const User = require(&#x27;../src/user&#x27;)</span><br><span class="line"></span><br><span class="line">// after installing Mocha, we have global access</span><br><span class="line">// to describe and it keywords</span><br><span class="line">describe(&#x27;Creating records&#x27;, () =&gt; &#123;</span><br><span class="line">  it(&#x27;saves a user&#x27;, () =&gt; &#123;</span><br><span class="line">    const joe = new User(&#123; name: &quot;Joe&quot; &#125;);</span><br><span class="line">    joe.save();</span><br><span class="line">    assert()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a name="VkfCM"></a></p><h2 id="7-NoSQL-Databases"><a href="#7-NoSQL-Databases" class="headerlink" title="7. NoSQL Databases"></a>7. NoSQL Databases</h2><p><strong>Benefits of NoSQL</strong></p><ul><li>Easy for inserting and retrieving data, since they are contained in one block, in one json object</li><li>Flexible schema, if a new attribute added, it is easy to just add / append to the object</li><li>Scalability, horizontally partition the data (availability &gt; consistency)</li><li>Aggregation, find metrics and etc</li></ul><p><strong>Drawbacks of NoSQL</strong></p><ul><li><p>Update = Delete + Insert, not built for update</p></li><li><p>Not consistent, ACID is not guaranteed, do not support transactions</p></li><li><p>Not read optimized. Read entire block find the attribute. But SQL, just need one column (read time compartively slow)</p></li><li><p>Relations are not implicit</p></li><li><p>JOINS are hard to accomplish, all manually<br><a name="VmXJH"></a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2></li><li><p><a href="https://mongoosejs.com/docs/guides.html">https://mongoosejs.com/docs/guides.html</a></p></li><li><p><a href="https://docs.mongodb.com/">https://docs.mongodb.com/</a></p></li><li><p><a href="https://www.bilibili.com/video/av59604756">https://www.bilibili.com/video/av59604756</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1bJ411x7mq">https://www.bilibili.com/video/BV1bJ411x7mq</a></p></li><li><p><a href="https://www.youtube.com/watch?v=-56x56UppqQ">https://www.youtube.com/watch?v=-56x56UppqQ</a></p></li></ul>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MySql从入门到精通</title>
    <link href="http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/MySQL/"/>
    <id>http://example.com/2022/09/25/%E7%AC%94%E8%AE%B0/MySQL/</id>
    <published>2022-09-25T07:11:05.000Z</published>
    <updated>2022-09-26T01:37:13.490Z</updated>
    
    <content type="html"><![CDATA[<p>“# 基础篇<br><a name="Jy3ps"></a></p><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li><p>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</p></li><li><p>DML: 数据操作语言，用来对数据库表中的数据进行增删改</p></li><li><p>DQL: 数据查询语言，用来查询数据库中表的记录</p></li><li><p>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限<br><a name="CVfoa"></a></p><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言<br><a name="cfaPh"></a></p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<code>SHOW DATABASES;</code>查询当前数据库：<code>SELECT DATABASE();</code>创建数据库：<code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code>删除数据库：<code>DROP DATABASE [ IF EXISTS ] 数据库名;</code>使用数据库：<code>USE 数据库名;</code><br><a name="nwmT7"></a></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5></li><li><p>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集<br><a name="ra4Ch"></a></p><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<code>SHOW TABLES;</code>查询表结构：<code>DESC 表名;</code>查询指定表的建表语句：<code>SHOW CREATE TABLE 表名;</code><br />创建表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure></li></ul><p><strong>最后一个字段后面没有逗号</strong><br />添加字段：<code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code><br />修改数据类型：<code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code>修改字段名和字段类型：<code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code>例：将emp表的nickname字段修改为username，类型为varchar(30)<code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code><br />删除字段：<code>ALTER TABLE 表名 DROP 字段名;</code><br />修改表名：<code>ALTER TABLE 表名 RENAME TO 新表名</code><br />删除表：<code>DROP TABLE [IF EXISTS] 表名;</code>删除表，并重新创建该表：<code>TRUNCATE TABLE 表名;</code><br><a name="I380T"></a></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><p><a name="dsdh1"></a></p><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code>全部字段：<code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code><br />批量添加数据：<code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);``INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><a name="ernxB"></a></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内<br><a name="y7Q9n"></a><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4>修改数据：<code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code>例：<code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code><br />删除数据：<code>DELETE FROM 表名 [ WHERE 条件 ];</code><br><a name="LBBMl"></a><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3>语法：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><a name="N7MeW"></a><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4>查询多个字段：<code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;``SELECT * FROM 表名;</code><br />设置别名：<code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;``SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code><br />去除重复记录：<code>SELECT DISTINCT 字段列表 FROM 表名;</code><br />转义：<code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code>/ 之后的_不作为通配符<br><a name="Ts5Hp"></a><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4>语法：<code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code><br />条件：</li></ul><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &#124;&#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure><p><a name="di60r"></a></p><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<code>SELECT 聚合函数(字段列表) FROM 表名;</code>例：<code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code><br><a name="fLh25"></a></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code><br />where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure><p><a name="uzoLn"></a></p><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><p>执行顺序：where &gt; 聚合函数 &gt; having</p></li><li><p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义<br><a name="TvMTQ"></a></p><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code><br />排序方式：</p></li><li><p>ASC: 升序（默认）</p></li><li><p>DESC: 降序</p></li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure><p><a name="SOuOj"></a></p><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序<br><a name="MY57n"></a></p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code><br />例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure><p><a name="iU2qY"></a></p><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><p>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</p></li><li><p>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</p></li><li><p>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10<br><a name="xSG16"></a></p><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT<br><a name="HZLQq"></a></p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><p><a name="cLJne"></a></p><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure><p>创建用户:<code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code><br />修改用户密码：<code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code><br />删除用户：<code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code><br />例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p><a name="njgPO"></a></p><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5></li><li><p>主机名可以使用 % 通配<br><a name="Od925"></a></p><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p></li></ul><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8">权限一览表</a><br />查询权限：<code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code><br />授予权限：<code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code><br />撤销权限：<code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code><br><a name="OtpIK"></a></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><p>多个权限用逗号分隔</p></li><li><p>授权时，数据库名和表名可以用 * 进行通配，代表所有<br><a name="Q9ett"></a></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2></li><li><p>字符串函数</p></li><li><p>数值函数</p></li><li><p>日期函数</p></li><li><p>流程函数<br><a name="XuC3M"></a></p><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p></li></ul><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br></pre></td></tr></table></figure><p><a name="wccoj"></a></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><p><a name="bNojO"></a></p><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure><p><a name="HgzPM"></a></p><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><p><a name="jXLRS"></a></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。<br><a name="a076e"></a></p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null unique,</span><br><span class="line">age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">status char(1) default &#x27;1&#x27;,</span><br><span class="line">gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a name="u8R7a"></a></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code><br><a name="oDeIn"></a></p><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除/更新行为：<code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code><br><a name="cbCcs"></a></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p><a name="ATAVt"></a></p><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一<br><a name="qX1gJ"></a><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4>案例：部门与员工 关系：一个部门对应多个员工，一个员工对应一个部门 实现：在多的一方建立外键，指向一的一方的主键<br><a name="di34L"></a><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4>案例：学生与课程 关系：一个学生可以选多门课程，一门课程也可以供多个学生选修 实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键<br><a name="DR03F"></a><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4>案例：用户与用户详情 关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率 实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）<br><a name="k9haO"></a><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3>合并查询（笛卡尔积，会展示所有组合结果）：<code>select * from employee, dept;</code><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote></li></ul><p>消除无效笛卡尔积：<code>select * from employee, dept where employee.dept = dept.id;</code><br><a name="BTLSY"></a></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分<br />隐式内连接：<code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code><br />显式内连接：<code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code><br />显式性能比隐式高<br />例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><p><a name="MXAFF"></a></p><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接： 查询左表所有数据，以及两张表交集部分数据<code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code>相当于查询表1的所有数据，包含表1和表2交集部分数据<br />右外连接： 查询右表所有数据，以及两张表交集部分数据<code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br />例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept<br><a name="hKq4m"></a></p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名<br />语法：<code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code><br />自连接查询，可以是内连接查询，也可以是外连接查询<br />例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure><p><a name="JJ2Cl"></a></p><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集<br />语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure><p><a name="GlGdZ"></a></p><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><p>UNION ALL 会有重复结果，UNION 不会</p></li><li><p>联合查询比使用or效率高，不会使索引失效<br><a name="mirHF"></a></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong><br />根据子查询结果可以分为：</p></li><li><p>标量子查询（子查询结果为单个值）</p></li><li><p>列子查询（子查询结果为一列）</p></li><li><p>行子查询（子查询结果为一行）</p></li><li><p>表子查询（子查询结果为多行多列）</p></li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后<br><a name="y0uvq"></a><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4>子查询返回的结果是单个值（数字、字符串、日期等）。 常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=<br />例子：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &#x27;销售部&#x27;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);</span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><a name="tzoiQ"></a><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4>返回的结果是一列（可以是多行）。<br />常用操作符：</li></ul><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));</span><br></pre></td></tr></table></figure><p><a name="DZphp"></a></p><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。 常用操作符：=, &lt;, &gt;, IN, NOT IN<br />例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure><p><a name="oQN3w"></a></p><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列 常用操作符：IN<br />例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><p><a name="zWHHU"></a></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。<br />基本操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>操作方式二：<br />开启事务：<code>START TRANSACTION 或 BEGIN TRANSACTION;</code>提交事务：<code>COMMIT;</code>回滚事务：<code>ROLLBACK;</code><br />操作实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p><a name="VwgoL"></a></p><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的<br><a name="az9lB"></a><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table></li></ul><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a></p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<code>SELECT @@TRANSACTION_ISOLATION;</code>设置事务隔离级别：<code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效<br><a name="qhMnX"></a></p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><p><a name="rWEVB"></a></p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：<br /><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png#crop=0&crop=0&crop=1&crop=1&id=c1q8X&originHeight=732&originWidth=1403&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png#crop=0&crop=0&crop=1&crop=1&id=Ti5N2&originHeight=649&originWidth=1504&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。 默认存储引擎是InnoDB。<br />相关操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure><p><a name="SvULT"></a></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。<br />特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间<br />知识点：<br />查看 Mysql 变量：<code>show variables like &#39;innodb_file_per_table&#39;;</code><br />从idb文件提取表结构数据： （在cmd运行）<code>ibd2sdi xxx.ibd</code><br />InnoDB 逻辑存储结构：<img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png#crop=0&crop=0&crop=1&crop=1&id=zAV1V&originHeight=651&originWidth=1583&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="MJU6d"></a></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。<br />特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li><p>xxx.sdi: 存储表结构信息</p></li><li><p>xxx.MYD: 存储数据</p></li><li><p>xxx.MYI: 存储索引<br><a name="TuUrp"></a></p><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。<br />特点：</p></li><li><p>存放在内存中，速度快</p></li><li><p>hash索引（默认）</p></li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息<br><a name="E1kcJ"></a><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table></li></ul><p><a name="SpquW"></a></p><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。<br><a name="D5Al3"></a></p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p><a name="vnakJ"></a></p><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code>例：<code>show global status like &#39;Com_______&#39;</code><br><a name="rgqzw"></a></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。 MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：     # 开启慢查询日志开关     slow_query_log=1     # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志     long_query_time=2 更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log<br />查看慢查询日志开关状态：<code>show variables like &#39;slow_query_log&#39;;</code><br><a name="K26B1"></a></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<code>SELECT @@have_profiling;</code>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<code>SET profiling = 1;</code>查看所有语句的耗时：<code>show profiles;</code>查看指定query_id的SQL语句各个阶段的耗时：<code>show profile for query query_id;</code>查看指定query_id的SQL语句CPU的使用情况<code>show profile cpu for query query_id;</code><br><a name="Z8Idl"></a></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。 语法：     # 直接在select语句之前加上关键字 explain / desc     EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;<br />EXPLAIN 各字段含义：</p><ul><li><p>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</p></li><li><p>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</p></li><li><p>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</p></li><li><p>possible_key：可能应用在这张表上的索引，一个或多个</p></li><li><p>Key：实际使用的索引，如果为 NULL，则没有使用索引</p></li><li><p>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</p></li><li><p>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</p></li><li><p>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好<br><a name="H8Nmv"></a></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。<br />优缺点：<br />优点：</p></li><li><p>提高数据检索效率，降低数据库的IO成本</p></li><li><p>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</p></li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE<br><a name="xNI5Z"></a><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table></li></ul><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p><a name="yjPKE"></a></p><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png#crop=0&crop=0&crop=1&crop=1&id=wkuoO&originHeight=617&originWidth=1216&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />二叉树的缺点可以用红黑树来解决：<img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png#crop=0&crop=0&crop=1&crop=1&id=WX9RF&originHeight=402&originWidth=487&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=">红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。<br />为了解决上述问题，可以使用 B-Tree 结构。 B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）<br /><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png#crop=0&crop=0&crop=1&crop=1&id=dSFRt&originHeight=457&originWidth=1561&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><p><a name="yXN1V"></a></p><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：<br /><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png#crop=0&crop=0&crop=1&crop=1&id=Kbcx7&originHeight=444&originWidth=1424&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。<br /><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png#crop=0&crop=0&crop=1&crop=1&id=yzGKc&originHeight=476&originWidth=1513&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="ca7jH"></a></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。 如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。<br /><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png#crop=0&crop=0&crop=1&crop=1&id=UcH45&originHeight=538&originWidth=1372&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />特点：</p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的<br><a name="uH8Zp"></a><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4></li></ul><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作<br><a name="WNwb4"></a><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table></li></ul><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：<br /><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png#crop=0&crop=0&crop=1&crop=1&id=sXgad&originHeight=765&originWidth=1517&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png#crop=0&crop=0&crop=1&crop=1&id=TbQ3Q&originHeight=778&originWidth=1510&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引<br><a name="gMqLU"></a><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4></li></ul><ol><li><p>以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &#x27;Arm&#x27;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。<br />2. InnoDB 主键索引的 B+Tree 高度为多少？<br />答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8. 可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。<br />如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>； 如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。<br />另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。<br><a name="vx6hK"></a></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引<br />查看索引：<code>SHOW INDEX FROM table_name;</code><br />删除索引：<code>DROP INDEX index_name ON table_name;</code><br />案例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure><p><a name="Bh2m1"></a></p><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><p><a name="Db0CA"></a></p><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。 如果跳跃某一列，索引将部分失效（后面的字段索引失效）。<br />联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。<br><a name="r9GfM"></a></p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4></li><li><p>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></p></li><li><p>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</p></li><li><p>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</p></li><li><p>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</p></li><li><p>如果 MySQL 评估使用索引比全表更慢，则不使用索引。<br><a name="r9RCk"></a></p><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。<br />例如，使用索引：<code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code>不使用哪个索引：<code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code>必须使用哪个索引：<code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br />use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。<br><a name="wsHAV"></a></p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。<br />explain 中 extra 字段含义：<code>using index condition</code>：查找使用了索引，但是需要回表查询数据<code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询<br />如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code><br />所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段<br />面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code><br />解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引<br><a name="LSojw"></a></p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。<br />语法：<code>create index idx_xxxx on table_name(columnn(n));</code>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。 求选择性公式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure><p>show index 里面的sub_part可以看到接取的长度<br><a name="dNZra"></a></p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列 联合索引：即一个索引包含了多个列 在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。<br />单列索引情况：<code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code>这句只会用到phone索引字段<br><a name="ghSQY"></a></p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5></li></ol><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询<br><a name="cK73v"></a><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3></li></ul><ol><li><p>针对于数据量较大，且查询比较频繁的表建立索引</p></li><li><p>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</p></li><li><p>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</p></li><li><p>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</p></li><li><p>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</p></li><li><p>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</p></li><li><p>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询<br><a name="E1GKH"></a></p><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><p><a name="ScASp"></a></p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p></li><li><p>采用批量插入（一次插入的数据不建议超过1000条）</p></li><li><p>手动提交事务</p></li><li><p>主键顺序插入</p></li></ol><p>大批量插入： 如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><p><a name="L2DzG"></a></p><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）<br />页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。 页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。<br />MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改<br><a name="t2QWN"></a><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3></li></ul><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引<br />总结：</p><ul><li><p>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</p></li><li><p>尽量使用覆盖索引</p></li><li><p>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</p></li><li><p>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）<br><a name="b4Bmf"></a></p><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3></li><li><p>在分组操作时，可以通过索引来提高效率</p></li><li><p>分组操作时，索引的使用也是满足最左前缀法则的</p></li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则<br><a name="N31H5"></a></p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。 优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化<br />例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure><p><a name="tVbfG"></a></p><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(<em>) 的时候会直接返回这个数，效率很高（前提是不适用where）； InnoDB 在执行 count(</em>) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。 优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis<br />count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(<em>)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(</em>)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)<br><a name="FgMQj"></a></p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。<br />如以下两条语句：<code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引<br><a name="JtJ1v"></a></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><a name="xxaH9"></a></p><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。<br><a name="hpQdd"></a></p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><p><a name="DUGVv"></a></p><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><p><a name="SqYxs"></a></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><p><a name="DR4I1"></a></p><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><p><a name="XdHms"></a></p><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th>Privilege</th><th>Grant Table Column</th><th>Context</th></tr></thead><tbody><tr><td><code>[ALL [PRIVILEGES]](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all)</code></td><td>Synonym for “all privileges”</td><td>Server administration</td></tr><tr><td><code>[ALTER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter)</code></td><td><code>Alter_priv</code></td><td>Tables</td></tr><tr><td><code>[ALTER ROUTINE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine)</code></td><td><code>Alter_routine_priv</code></td><td>Stored routines</td></tr><tr><td><code>[CREATE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create)</code></td><td><code>Create_priv</code></td><td>Databases, tables, or indexes</td></tr><tr><td><code>[CREATE ROLE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role)</code></td><td><code>Create_role_priv</code></td><td>Server administration</td></tr><tr><td><code>[CREATE ROUTINE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine)</code></td><td><code>Create_routine_priv</code></td><td>Stored routines</td></tr><tr><td><code>[CREATE TABLESPACE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace)</code></td><td><code>Create_tablespace_priv</code></td><td>Server administration</td></tr><tr><td><code>[CREATE TEMPORARY TABLES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables)</code></td><td><code>Create_tmp_table_priv</code></td><td>Tables</td></tr><tr><td><code>[CREATE USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user)</code></td><td><code>Create_user_priv</code></td><td>Server administration</td></tr><tr><td><code>[CREATE VIEW](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view)</code></td><td><code>Create_view_priv</code></td><td>Views</td></tr><tr><td><code>[DELETE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete)</code></td><td><code>Delete_priv</code></td><td>Tables</td></tr><tr><td><code>[DROP](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop)</code></td><td><code>Drop_priv</code></td><td>Databases, tables, or views</td></tr><tr><td><code>[DROP ROLE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role)</code></td><td><code>Drop_role_priv</code></td><td>Server administration</td></tr><tr><td><code>[EVENT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event)</code></td><td><code>Event_priv</code></td><td>Databases</td></tr><tr><td><code>[EXECUTE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute)</code></td><td><code>Execute_priv</code></td><td>Stored routines</td></tr><tr><td><code>[FILE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file)</code></td><td><code>File_priv</code></td><td>File access on server host</td></tr><tr><td><code>[GRANT OPTION](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option)</code></td><td><code>Grant_priv</code></td><td>Databases, tables, or stored routines</td></tr><tr><td><code>[INDEX](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index)</code></td><td><code>Index_priv</code></td><td>Tables</td></tr><tr><td><code>[INSERT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert)</code></td><td><code>Insert_priv</code></td><td>Tables or columns</td></tr><tr><td><code>[LOCK TABLES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables)</code></td><td><code>Lock_tables_priv</code></td><td>Databases</td></tr><tr><td><code>[PROCESS](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process)</code></td><td><code>Process_priv</code></td><td>Server administration</td></tr><tr><td><code>[PROXY](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy)</code></td><td>See <code>proxies_priv</code><br /> table</td><td>Server administration</td></tr><tr><td><code>[REFERENCES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references)</code></td><td><code>References_priv</code></td><td>Databases or tables</td></tr><tr><td><code>[RELOAD](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload)</code></td><td><code>Reload_priv</code></td><td>Server administration</td></tr><tr><td><code>[REPLICATION CLIENT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client)</code></td><td><code>Repl_client_priv</code></td><td>Server administration</td></tr><tr><td><code>[REPLICATION SLAVE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave)</code></td><td><code>Repl_slave_priv</code></td><td>Server administration</td></tr><tr><td><code>[SELECT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select)</code></td><td><code>Select_priv</code></td><td>Tables or columns</td></tr><tr><td><code>[SHOW DATABASES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases)</code></td><td><code>Show_db_priv</code></td><td>Server administration</td></tr><tr><td><code>[SHOW VIEW](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view)</code></td><td><code>Show_view_priv</code></td><td>Views</td></tr><tr><td><code>[SHUTDOWN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown)</code></td><td><code>Shutdown_priv</code></td><td>Server administration</td></tr><tr><td><code>[SUPER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super)</code></td><td><code>Super_priv</code></td><td>Server administration</td></tr><tr><td><code>[TRIGGER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger)</code></td><td><code>Trigger_priv</code></td><td>Tables</td></tr><tr><td><code>[UPDATE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update)</code></td><td><code>Update_priv</code></td><td>Tables or columns</td></tr><tr><td><code>[USAGE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage)</code></td><td>Synonym for “no privileges”</td><td>Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th>Privilege</th><th>Context</th></tr></thead><tbody><tr><td><code>[APPLICATION_PASSWORD_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin)</code></td><td>Dual password administration</td></tr><tr><td><code>[AUDIT_ABORT_EXEMPT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt)</code></td><td>Allow queries blocked by audit log filter</td></tr><tr><td><code>[AUDIT_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin)</code></td><td>Audit log administration</td></tr><tr><td><code>[AUTHENTICATION_POLICY_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin)</code></td><td>Authentication administration</td></tr><tr><td><code>[BACKUP_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin)</code></td><td>Backup administration</td></tr><tr><td><code>[BINLOG_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin)</code></td><td>Backup and Replication administration</td></tr><tr><td><code>[BINLOG_ENCRYPTION_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin)</code></td><td>Backup and Replication administration</td></tr><tr><td><code>[CLONE_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin)</code></td><td>Clone administration</td></tr><tr><td><code>[CONNECTION_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin)</code></td><td>Server administration</td></tr><tr><td><code>[ENCRYPTION_KEY_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin)</code></td><td>Server administration</td></tr><tr><td><code>[FIREWALL_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin)</code></td><td>Firewall administration</td></tr><tr><td><code>[FIREWALL_EXEMPT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt)</code></td><td>Firewall administration</td></tr><tr><td><code>[FIREWALL_USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user)</code></td><td>Firewall administration</td></tr><tr><td><code>[FLUSH_OPTIMIZER_COSTS](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs)</code></td><td>Server administration</td></tr><tr><td><code>[FLUSH_STATUS](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status)</code></td><td>Server administration</td></tr><tr><td><code>[FLUSH_TABLES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables)</code></td><td>Server administration</td></tr><tr><td><code>[FLUSH_USER_RESOURCES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources)</code></td><td>Server administration</td></tr><tr><td><code>[GROUP_REPLICATION_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin)</code></td><td>Replication administration</td></tr><tr><td><code>[GROUP_REPLICATION_STREAM](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream)</code></td><td>Replication administration</td></tr><tr><td><code>[INNODB_REDO_LOG_ARCHIVE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive)</code></td><td>Redo log archiving administration</td></tr><tr><td><code>[NDB_STORED_USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user)</code></td><td>NDB Cluster</td></tr><tr><td><code>[PASSWORDLESS_USER_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin)</code></td><td>Authentication administration</td></tr><tr><td><code>[PERSIST_RO_VARIABLES_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin)</code></td><td>Server administration</td></tr><tr><td><code>[REPLICATION_APPLIER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier)</code></td><td><code>PRIVILEGE_CHECKS_USER</code><br /> for a replication channel</td></tr><tr><td><code>[REPLICATION_SLAVE_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin)</code></td><td>Replication administration</td></tr><tr><td><code>[RESOURCE_GROUP_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin)</code></td><td>Resource group administration</td></tr><tr><td><code>[RESOURCE_GROUP_USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user)</code></td><td>Resource group administration</td></tr><tr><td><code>[ROLE_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin)</code></td><td>Server administration</td></tr><tr><td><code>[SESSION_VARIABLES_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin)</code></td><td>Server administration</td></tr><tr><td><code>[SET_USER_ID](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id)</code></td><td>Server administration</td></tr><tr><td><code>[SHOW_ROUTINE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine)</code></td><td>Server administration</td></tr><tr><td><code>[SYSTEM_USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user)</code></td><td>Server administration</td></tr><tr><td><code>[SYSTEM_VARIABLES_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin)</code></td><td>Server administration</td></tr><tr><td><code>[TABLE_ENCRYPTION_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin)</code></td><td>Server administration</td></tr><tr><td><code>[VERSION_TOKEN_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin)</code></td><td>Server administration</td></tr><tr><td><code>[XA_RECOVER_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin)</code></td><td>Server administration</td></tr></tbody></table><p><a name="CzfyK"></a></p><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a><br><a name="sJMuy"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><a name="e1iGV"></a><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1></li></ul><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT table_schema &quot;Database Name&quot;</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">演示</summary>
    
    
    
    
  </entry>
  
</feed>
